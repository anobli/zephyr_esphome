/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: api.proto */

#ifndef PROTOBUF_C_api_2eproto__INCLUDED
#define PROTOBUF_C_api_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "api_options.pb-c.h"

typedef struct HelloRequest HelloRequest;
typedef struct HelloResponse HelloResponse;
typedef struct ConnectRequest ConnectRequest;
typedef struct ConnectResponse ConnectResponse;
typedef struct DisconnectRequest DisconnectRequest;
typedef struct DisconnectResponse DisconnectResponse;
typedef struct PingRequest PingRequest;
typedef struct PingResponse PingResponse;
typedef struct DeviceInfoRequest DeviceInfoRequest;
typedef struct DeviceInfoResponse DeviceInfoResponse;
typedef struct ListEntitiesRequest ListEntitiesRequest;
typedef struct ListEntitiesDoneResponse ListEntitiesDoneResponse;
typedef struct SubscribeStatesRequest SubscribeStatesRequest;
typedef struct ListEntitiesBinarySensorResponse ListEntitiesBinarySensorResponse;
typedef struct BinarySensorStateResponse BinarySensorStateResponse;
typedef struct ListEntitiesCoverResponse ListEntitiesCoverResponse;
typedef struct CoverStateResponse CoverStateResponse;
typedef struct CoverCommandRequest CoverCommandRequest;
typedef struct ListEntitiesFanResponse ListEntitiesFanResponse;
typedef struct FanStateResponse FanStateResponse;
typedef struct FanCommandRequest FanCommandRequest;
typedef struct ListEntitiesLightResponse ListEntitiesLightResponse;
typedef struct LightStateResponse LightStateResponse;
typedef struct LightCommandRequest LightCommandRequest;
typedef struct ListEntitiesSensorResponse ListEntitiesSensorResponse;
typedef struct SensorStateResponse SensorStateResponse;
typedef struct ListEntitiesSwitchResponse ListEntitiesSwitchResponse;
typedef struct SwitchStateResponse SwitchStateResponse;
typedef struct SwitchCommandRequest SwitchCommandRequest;
typedef struct ListEntitiesTextSensorResponse ListEntitiesTextSensorResponse;
typedef struct TextSensorStateResponse TextSensorStateResponse;
typedef struct SubscribeLogsRequest SubscribeLogsRequest;
typedef struct SubscribeLogsResponse SubscribeLogsResponse;
typedef struct SubscribeHomeassistantServicesRequest SubscribeHomeassistantServicesRequest;
typedef struct HomeassistantServiceMap HomeassistantServiceMap;
typedef struct HomeassistantServiceResponse HomeassistantServiceResponse;
typedef struct SubscribeHomeAssistantStatesRequest SubscribeHomeAssistantStatesRequest;
typedef struct SubscribeHomeAssistantStateResponse SubscribeHomeAssistantStateResponse;
typedef struct HomeAssistantStateResponse HomeAssistantStateResponse;
typedef struct GetTimeRequest GetTimeRequest;
typedef struct GetTimeResponse GetTimeResponse;
typedef struct ListEntitiesServicesArgument ListEntitiesServicesArgument;
typedef struct ListEntitiesServicesResponse ListEntitiesServicesResponse;
typedef struct ExecuteServiceArgument ExecuteServiceArgument;
typedef struct ExecuteServiceRequest ExecuteServiceRequest;
typedef struct ListEntitiesCameraResponse ListEntitiesCameraResponse;
typedef struct CameraImageResponse CameraImageResponse;
typedef struct CameraImageRequest CameraImageRequest;
typedef struct ListEntitiesClimateResponse ListEntitiesClimateResponse;
typedef struct ClimateStateResponse ClimateStateResponse;
typedef struct ClimateCommandRequest ClimateCommandRequest;
typedef struct ListEntitiesNumberResponse ListEntitiesNumberResponse;
typedef struct NumberStateResponse NumberStateResponse;
typedef struct NumberCommandRequest NumberCommandRequest;
typedef struct ListEntitiesSelectResponse ListEntitiesSelectResponse;
typedef struct SelectStateResponse SelectStateResponse;
typedef struct SelectCommandRequest SelectCommandRequest;
typedef struct ListEntitiesLockResponse ListEntitiesLockResponse;
typedef struct LockStateResponse LockStateResponse;
typedef struct LockCommandRequest LockCommandRequest;
typedef struct ListEntitiesButtonResponse ListEntitiesButtonResponse;
typedef struct ButtonCommandRequest ButtonCommandRequest;
typedef struct MediaPlayerSupportedFormat MediaPlayerSupportedFormat;
typedef struct ListEntitiesMediaPlayerResponse ListEntitiesMediaPlayerResponse;
typedef struct MediaPlayerStateResponse MediaPlayerStateResponse;
typedef struct MediaPlayerCommandRequest MediaPlayerCommandRequest;
typedef struct SubscribeBluetoothLEAdvertisementsRequest SubscribeBluetoothLEAdvertisementsRequest;
typedef struct BluetoothServiceData BluetoothServiceData;
typedef struct BluetoothLEAdvertisementResponse BluetoothLEAdvertisementResponse;
typedef struct BluetoothLERawAdvertisement BluetoothLERawAdvertisement;
typedef struct BluetoothLERawAdvertisementsResponse BluetoothLERawAdvertisementsResponse;
typedef struct BluetoothDeviceRequest BluetoothDeviceRequest;
typedef struct BluetoothDeviceConnectionResponse BluetoothDeviceConnectionResponse;
typedef struct BluetoothGATTGetServicesRequest BluetoothGATTGetServicesRequest;
typedef struct BluetoothGATTDescriptor BluetoothGATTDescriptor;
typedef struct BluetoothGATTCharacteristic BluetoothGATTCharacteristic;
typedef struct BluetoothGATTService BluetoothGATTService;
typedef struct BluetoothGATTGetServicesResponse BluetoothGATTGetServicesResponse;
typedef struct BluetoothGATTGetServicesDoneResponse BluetoothGATTGetServicesDoneResponse;
typedef struct BluetoothGATTReadRequest BluetoothGATTReadRequest;
typedef struct BluetoothGATTReadResponse BluetoothGATTReadResponse;
typedef struct BluetoothGATTWriteRequest BluetoothGATTWriteRequest;
typedef struct BluetoothGATTReadDescriptorRequest BluetoothGATTReadDescriptorRequest;
typedef struct BluetoothGATTWriteDescriptorRequest BluetoothGATTWriteDescriptorRequest;
typedef struct BluetoothGATTNotifyRequest BluetoothGATTNotifyRequest;
typedef struct BluetoothGATTNotifyDataResponse BluetoothGATTNotifyDataResponse;
typedef struct SubscribeBluetoothConnectionsFreeRequest SubscribeBluetoothConnectionsFreeRequest;
typedef struct BluetoothConnectionsFreeResponse BluetoothConnectionsFreeResponse;
typedef struct BluetoothGATTErrorResponse BluetoothGATTErrorResponse;
typedef struct BluetoothGATTWriteResponse BluetoothGATTWriteResponse;
typedef struct BluetoothGATTNotifyResponse BluetoothGATTNotifyResponse;
typedef struct BluetoothDevicePairingResponse BluetoothDevicePairingResponse;
typedef struct BluetoothDeviceUnpairingResponse BluetoothDeviceUnpairingResponse;
typedef struct UnsubscribeBluetoothLEAdvertisementsRequest
	UnsubscribeBluetoothLEAdvertisementsRequest;
typedef struct BluetoothDeviceClearCacheResponse BluetoothDeviceClearCacheResponse;
typedef struct SubscribeVoiceAssistantRequest SubscribeVoiceAssistantRequest;
typedef struct VoiceAssistantAudioSettings VoiceAssistantAudioSettings;
typedef struct VoiceAssistantRequest VoiceAssistantRequest;
typedef struct VoiceAssistantResponse VoiceAssistantResponse;
typedef struct VoiceAssistantEventData VoiceAssistantEventData;
typedef struct VoiceAssistantEventResponse VoiceAssistantEventResponse;
typedef struct VoiceAssistantAudio VoiceAssistantAudio;
typedef struct VoiceAssistantTimerEventResponse VoiceAssistantTimerEventResponse;
typedef struct VoiceAssistantAnnounceRequest VoiceAssistantAnnounceRequest;
typedef struct VoiceAssistantAnnounceFinished VoiceAssistantAnnounceFinished;
typedef struct VoiceAssistantWakeWord VoiceAssistantWakeWord;
typedef struct VoiceAssistantConfigurationRequest VoiceAssistantConfigurationRequest;
typedef struct VoiceAssistantConfigurationResponse VoiceAssistantConfigurationResponse;
typedef struct VoiceAssistantSetConfiguration VoiceAssistantSetConfiguration;
typedef struct ListEntitiesAlarmControlPanelResponse ListEntitiesAlarmControlPanelResponse;
typedef struct AlarmControlPanelStateResponse AlarmControlPanelStateResponse;
typedef struct AlarmControlPanelCommandRequest AlarmControlPanelCommandRequest;
typedef struct ListEntitiesTextResponse ListEntitiesTextResponse;
typedef struct TextStateResponse TextStateResponse;
typedef struct TextCommandRequest TextCommandRequest;
typedef struct ListEntitiesDateResponse ListEntitiesDateResponse;
typedef struct DateStateResponse DateStateResponse;
typedef struct DateCommandRequest DateCommandRequest;
typedef struct ListEntitiesTimeResponse ListEntitiesTimeResponse;
typedef struct TimeStateResponse TimeStateResponse;
typedef struct TimeCommandRequest TimeCommandRequest;
typedef struct ListEntitiesEventResponse ListEntitiesEventResponse;
typedef struct EventResponse EventResponse;
typedef struct ListEntitiesValveResponse ListEntitiesValveResponse;
typedef struct ValveStateResponse ValveStateResponse;
typedef struct ValveCommandRequest ValveCommandRequest;
typedef struct ListEntitiesDateTimeResponse ListEntitiesDateTimeResponse;
typedef struct DateTimeStateResponse DateTimeStateResponse;
typedef struct DateTimeCommandRequest DateTimeCommandRequest;
typedef struct ListEntitiesUpdateResponse ListEntitiesUpdateResponse;
typedef struct UpdateStateResponse UpdateStateResponse;
typedef struct UpdateCommandRequest UpdateCommandRequest;

/* --- enums --- */

typedef enum _EntityCategory {
	ENTITY_CATEGORY__ENTITY_CATEGORY_NONE = 0,
	ENTITY_CATEGORY__ENTITY_CATEGORY_CONFIG = 1,
	ENTITY_CATEGORY__ENTITY_CATEGORY_DIAGNOSTIC =
		2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENTITY_CATEGORY)
} EntityCategory;
typedef enum _LegacyCoverState {
	LEGACY_COVER_STATE__LEGACY_COVER_STATE_OPEN = 0,
	LEGACY_COVER_STATE__LEGACY_COVER_STATE_CLOSED =
		1 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LEGACY_COVER_STATE)
} LegacyCoverState;
typedef enum _CoverOperation {
	COVER_OPERATION__COVER_OPERATION_IDLE = 0,
	COVER_OPERATION__COVER_OPERATION_IS_OPENING = 1,
	COVER_OPERATION__COVER_OPERATION_IS_CLOSING =
		2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COVER_OPERATION)
} CoverOperation;
typedef enum _LegacyCoverCommand {
	LEGACY_COVER_COMMAND__LEGACY_COVER_COMMAND_OPEN = 0,
	LEGACY_COVER_COMMAND__LEGACY_COVER_COMMAND_CLOSE = 1,
	LEGACY_COVER_COMMAND__LEGACY_COVER_COMMAND_STOP =
		2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LEGACY_COVER_COMMAND)
} LegacyCoverCommand;
typedef enum _FanSpeed {
	FAN_SPEED__FAN_SPEED_LOW = 0,
	FAN_SPEED__FAN_SPEED_MEDIUM = 1,
	FAN_SPEED__FAN_SPEED_HIGH = 2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FAN_SPEED)
} FanSpeed;
typedef enum _FanDirection {
	FAN_DIRECTION__FAN_DIRECTION_FORWARD = 0,
	FAN_DIRECTION__FAN_DIRECTION_REVERSE =
		1 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FAN_DIRECTION)
} FanDirection;
/*
 * ==================== LIGHT ====================
 */
typedef enum _ColorMode {
	COLOR_MODE__COLOR_MODE_UNKNOWN = 0,
	COLOR_MODE__COLOR_MODE_ON_OFF = 1,
	COLOR_MODE__COLOR_MODE_BRIGHTNESS = 2,
	COLOR_MODE__COLOR_MODE_WHITE = 7,
	COLOR_MODE__COLOR_MODE_COLOR_TEMPERATURE = 11,
	COLOR_MODE__COLOR_MODE_COLD_WARM_WHITE = 19,
	COLOR_MODE__COLOR_MODE_RGB = 35,
	COLOR_MODE__COLOR_MODE_RGB_WHITE = 39,
	COLOR_MODE__COLOR_MODE_RGB_COLOR_TEMPERATURE = 47,
	COLOR_MODE__COLOR_MODE_RGB_COLD_WARM_WHITE =
		51 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COLOR_MODE)
} ColorMode;
/*
 * ==================== SENSOR ====================
 */
typedef enum _SensorStateClass {
	SENSOR_STATE_CLASS__STATE_CLASS_NONE = 0,
	SENSOR_STATE_CLASS__STATE_CLASS_MEASUREMENT = 1,
	SENSOR_STATE_CLASS__STATE_CLASS_TOTAL_INCREASING = 2,
	SENSOR_STATE_CLASS__STATE_CLASS_TOTAL =
		3 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SENSOR_STATE_CLASS)
} SensorStateClass;
typedef enum _SensorLastResetType {
	SENSOR_LAST_RESET_TYPE__LAST_RESET_NONE = 0,
	SENSOR_LAST_RESET_TYPE__LAST_RESET_NEVER = 1,
	SENSOR_LAST_RESET_TYPE__LAST_RESET_AUTO =
		2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SENSOR_LAST_RESET_TYPE)
} SensorLastResetType;
/*
 * ==================== SUBSCRIBE LOGS ====================
 */
typedef enum _LogLevel {
	LOG_LEVEL__LOG_LEVEL_NONE = 0,
	LOG_LEVEL__LOG_LEVEL_ERROR = 1,
	LOG_LEVEL__LOG_LEVEL_WARN = 2,
	LOG_LEVEL__LOG_LEVEL_INFO = 3,
	LOG_LEVEL__LOG_LEVEL_CONFIG = 4,
	LOG_LEVEL__LOG_LEVEL_DEBUG = 5,
	LOG_LEVEL__LOG_LEVEL_VERBOSE = 6,
	LOG_LEVEL__LOG_LEVEL_VERY_VERBOSE = 7 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOG_LEVEL)
} LogLevel;
/*
 * ==================== USER-DEFINES SERVICES ====================
 */
typedef enum _ServiceArgType {
	SERVICE_ARG_TYPE__SERVICE_ARG_TYPE_BOOL = 0,
	SERVICE_ARG_TYPE__SERVICE_ARG_TYPE_INT = 1,
	SERVICE_ARG_TYPE__SERVICE_ARG_TYPE_FLOAT = 2,
	SERVICE_ARG_TYPE__SERVICE_ARG_TYPE_STRING = 3,
	SERVICE_ARG_TYPE__SERVICE_ARG_TYPE_BOOL_ARRAY = 4,
	SERVICE_ARG_TYPE__SERVICE_ARG_TYPE_INT_ARRAY = 5,
	SERVICE_ARG_TYPE__SERVICE_ARG_TYPE_FLOAT_ARRAY = 6,
	SERVICE_ARG_TYPE__SERVICE_ARG_TYPE_STRING_ARRAY =
		7 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SERVICE_ARG_TYPE)
} ServiceArgType;
/*
 * ==================== CLIMATE ====================
 */
typedef enum _ClimateMode {
	CLIMATE_MODE__CLIMATE_MODE_OFF = 0,
	CLIMATE_MODE__CLIMATE_MODE_HEAT_COOL = 1,
	CLIMATE_MODE__CLIMATE_MODE_COOL = 2,
	CLIMATE_MODE__CLIMATE_MODE_HEAT = 3,
	CLIMATE_MODE__CLIMATE_MODE_FAN_ONLY = 4,
	CLIMATE_MODE__CLIMATE_MODE_DRY = 5,
	CLIMATE_MODE__CLIMATE_MODE_AUTO = 6 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIMATE_MODE)
} ClimateMode;
typedef enum _ClimateFanMode {
	CLIMATE_FAN_MODE__CLIMATE_FAN_ON = 0,
	CLIMATE_FAN_MODE__CLIMATE_FAN_OFF = 1,
	CLIMATE_FAN_MODE__CLIMATE_FAN_AUTO = 2,
	CLIMATE_FAN_MODE__CLIMATE_FAN_LOW = 3,
	CLIMATE_FAN_MODE__CLIMATE_FAN_MEDIUM = 4,
	CLIMATE_FAN_MODE__CLIMATE_FAN_HIGH = 5,
	CLIMATE_FAN_MODE__CLIMATE_FAN_MIDDLE = 6,
	CLIMATE_FAN_MODE__CLIMATE_FAN_FOCUS = 7,
	CLIMATE_FAN_MODE__CLIMATE_FAN_DIFFUSE = 8,
	CLIMATE_FAN_MODE__CLIMATE_FAN_QUIET =
		9 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIMATE_FAN_MODE)
} ClimateFanMode;
typedef enum _ClimateSwingMode {
	CLIMATE_SWING_MODE__CLIMATE_SWING_OFF = 0,
	CLIMATE_SWING_MODE__CLIMATE_SWING_BOTH = 1,
	CLIMATE_SWING_MODE__CLIMATE_SWING_VERTICAL = 2,
	CLIMATE_SWING_MODE__CLIMATE_SWING_HORIZONTAL =
		3 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIMATE_SWING_MODE)
} ClimateSwingMode;
typedef enum _ClimateAction {
	CLIMATE_ACTION__CLIMATE_ACTION_OFF = 0,
	/*
	 * values same as mode for readability
	 */
	CLIMATE_ACTION__CLIMATE_ACTION_COOLING = 2,
	CLIMATE_ACTION__CLIMATE_ACTION_HEATING = 3,
	CLIMATE_ACTION__CLIMATE_ACTION_IDLE = 4,
	CLIMATE_ACTION__CLIMATE_ACTION_DRYING = 5,
	CLIMATE_ACTION__CLIMATE_ACTION_FAN = 6 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIMATE_ACTION)
} ClimateAction;
typedef enum _ClimatePreset {
	CLIMATE_PRESET__CLIMATE_PRESET_NONE = 0,
	CLIMATE_PRESET__CLIMATE_PRESET_HOME = 1,
	CLIMATE_PRESET__CLIMATE_PRESET_AWAY = 2,
	CLIMATE_PRESET__CLIMATE_PRESET_BOOST = 3,
	CLIMATE_PRESET__CLIMATE_PRESET_COMFORT = 4,
	CLIMATE_PRESET__CLIMATE_PRESET_ECO = 5,
	CLIMATE_PRESET__CLIMATE_PRESET_SLEEP = 6,
	CLIMATE_PRESET__CLIMATE_PRESET_ACTIVITY =
		7 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIMATE_PRESET)
} ClimatePreset;
/*
 * ==================== NUMBER ====================
 */
typedef enum _NumberMode {
	NUMBER_MODE__NUMBER_MODE_AUTO = 0,
	NUMBER_MODE__NUMBER_MODE_BOX = 1,
	NUMBER_MODE__NUMBER_MODE_SLIDER = 2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(NUMBER_MODE)
} NumberMode;
/*
 * ==================== LOCK ====================
 */
typedef enum _LockState {
	LOCK_STATE__LOCK_STATE_NONE = 0,
	LOCK_STATE__LOCK_STATE_LOCKED = 1,
	LOCK_STATE__LOCK_STATE_UNLOCKED = 2,
	LOCK_STATE__LOCK_STATE_JAMMED = 3,
	LOCK_STATE__LOCK_STATE_LOCKING = 4,
	LOCK_STATE__LOCK_STATE_UNLOCKING = 5 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOCK_STATE)
} LockState;
typedef enum _LockCommand {
	LOCK_COMMAND__LOCK_UNLOCK = 0,
	LOCK_COMMAND__LOCK_LOCK = 1,
	LOCK_COMMAND__LOCK_OPEN = 2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOCK_COMMAND)
} LockCommand;
/*
 * ==================== MEDIA PLAYER ====================
 */
typedef enum _MediaPlayerState {
	MEDIA_PLAYER_STATE__MEDIA_PLAYER_STATE_NONE = 0,
	MEDIA_PLAYER_STATE__MEDIA_PLAYER_STATE_IDLE = 1,
	MEDIA_PLAYER_STATE__MEDIA_PLAYER_STATE_PLAYING = 2,
	MEDIA_PLAYER_STATE__MEDIA_PLAYER_STATE_PAUSED =
		3 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MEDIA_PLAYER_STATE)
} MediaPlayerState;
typedef enum _MediaPlayerCommand {
	MEDIA_PLAYER_COMMAND__MEDIA_PLAYER_COMMAND_PLAY = 0,
	MEDIA_PLAYER_COMMAND__MEDIA_PLAYER_COMMAND_PAUSE = 1,
	MEDIA_PLAYER_COMMAND__MEDIA_PLAYER_COMMAND_STOP = 2,
	MEDIA_PLAYER_COMMAND__MEDIA_PLAYER_COMMAND_MUTE = 3,
	MEDIA_PLAYER_COMMAND__MEDIA_PLAYER_COMMAND_UNMUTE =
		4 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MEDIA_PLAYER_COMMAND)
} MediaPlayerCommand;
typedef enum _MediaPlayerFormatPurpose {
	MEDIA_PLAYER_FORMAT_PURPOSE__MEDIA_PLAYER_FORMAT_PURPOSE_DEFAULT = 0,
	MEDIA_PLAYER_FORMAT_PURPOSE__MEDIA_PLAYER_FORMAT_PURPOSE_ANNOUNCEMENT =
		1 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MEDIA_PLAYER_FORMAT_PURPOSE)
} MediaPlayerFormatPurpose;
typedef enum _BluetoothDeviceRequestType {
	BLUETOOTH_DEVICE_REQUEST_TYPE__BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT = 0,
	BLUETOOTH_DEVICE_REQUEST_TYPE__BLUETOOTH_DEVICE_REQUEST_TYPE_DISCONNECT = 1,
	BLUETOOTH_DEVICE_REQUEST_TYPE__BLUETOOTH_DEVICE_REQUEST_TYPE_PAIR = 2,
	BLUETOOTH_DEVICE_REQUEST_TYPE__BLUETOOTH_DEVICE_REQUEST_TYPE_UNPAIR = 3,
	BLUETOOTH_DEVICE_REQUEST_TYPE__BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITH_CACHE = 4,
	BLUETOOTH_DEVICE_REQUEST_TYPE__BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITHOUT_CACHE = 5,
	BLUETOOTH_DEVICE_REQUEST_TYPE__BLUETOOTH_DEVICE_REQUEST_TYPE_CLEAR_CACHE =
		6 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BLUETOOTH_DEVICE_REQUEST_TYPE)
} BluetoothDeviceRequestType;
/*
 * ==================== PUSH TO TALK ====================
 */
typedef enum _VoiceAssistantSubscribeFlag {
	VOICE_ASSISTANT_SUBSCRIBE_FLAG__VOICE_ASSISTANT_SUBSCRIBE_NONE = 0,
	VOICE_ASSISTANT_SUBSCRIBE_FLAG__VOICE_ASSISTANT_SUBSCRIBE_API_AUDIO =
		1 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOICE_ASSISTANT_SUBSCRIBE_FLAG)
} VoiceAssistantSubscribeFlag;
typedef enum _VoiceAssistantRequestFlag {
	VOICE_ASSISTANT_REQUEST_FLAG__VOICE_ASSISTANT_REQUEST_NONE = 0,
	VOICE_ASSISTANT_REQUEST_FLAG__VOICE_ASSISTANT_REQUEST_USE_VAD = 1,
	VOICE_ASSISTANT_REQUEST_FLAG__VOICE_ASSISTANT_REQUEST_USE_WAKE_WORD =
		2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOICE_ASSISTANT_REQUEST_FLAG)
} VoiceAssistantRequestFlag;
typedef enum _VoiceAssistantEvent {
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_ERROR = 0,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_RUN_START = 1,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_RUN_END = 2,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_STT_START = 3,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_STT_END = 4,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_INTENT_START = 5,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_INTENT_END = 6,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_TTS_START = 7,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_TTS_END = 8,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_WAKE_WORD_START = 9,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_WAKE_WORD_END = 10,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_STT_VAD_START = 11,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_STT_VAD_END = 12,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_TTS_STREAM_START = 98,
	VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_TTS_STREAM_END =
		99 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOICE_ASSISTANT_EVENT)
} VoiceAssistantEvent;
typedef enum _VoiceAssistantTimerEvent {
	VOICE_ASSISTANT_TIMER_EVENT__VOICE_ASSISTANT_TIMER_STARTED = 0,
	VOICE_ASSISTANT_TIMER_EVENT__VOICE_ASSISTANT_TIMER_UPDATED = 1,
	VOICE_ASSISTANT_TIMER_EVENT__VOICE_ASSISTANT_TIMER_CANCELLED = 2,
	VOICE_ASSISTANT_TIMER_EVENT__VOICE_ASSISTANT_TIMER_FINISHED =
		3 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOICE_ASSISTANT_TIMER_EVENT)
} VoiceAssistantTimerEvent;
/*
 * ==================== ALARM CONTROL PANEL ====================
 */
typedef enum _AlarmControlPanelState {
	ALARM_CONTROL_PANEL_STATE__ALARM_STATE_DISARMED = 0,
	ALARM_CONTROL_PANEL_STATE__ALARM_STATE_ARMED_HOME = 1,
	ALARM_CONTROL_PANEL_STATE__ALARM_STATE_ARMED_AWAY = 2,
	ALARM_CONTROL_PANEL_STATE__ALARM_STATE_ARMED_NIGHT = 3,
	ALARM_CONTROL_PANEL_STATE__ALARM_STATE_ARMED_VACATION = 4,
	ALARM_CONTROL_PANEL_STATE__ALARM_STATE_ARMED_CUSTOM_BYPASS = 5,
	ALARM_CONTROL_PANEL_STATE__ALARM_STATE_PENDING = 6,
	ALARM_CONTROL_PANEL_STATE__ALARM_STATE_ARMING = 7,
	ALARM_CONTROL_PANEL_STATE__ALARM_STATE_DISARMING = 8,
	ALARM_CONTROL_PANEL_STATE__ALARM_STATE_TRIGGERED =
		9 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ALARM_CONTROL_PANEL_STATE)
} AlarmControlPanelState;
typedef enum _AlarmControlPanelStateCommand {
	ALARM_CONTROL_PANEL_STATE_COMMAND__ALARM_CONTROL_PANEL_DISARM = 0,
	ALARM_CONTROL_PANEL_STATE_COMMAND__ALARM_CONTROL_PANEL_ARM_AWAY = 1,
	ALARM_CONTROL_PANEL_STATE_COMMAND__ALARM_CONTROL_PANEL_ARM_HOME = 2,
	ALARM_CONTROL_PANEL_STATE_COMMAND__ALARM_CONTROL_PANEL_ARM_NIGHT = 3,
	ALARM_CONTROL_PANEL_STATE_COMMAND__ALARM_CONTROL_PANEL_ARM_VACATION = 4,
	ALARM_CONTROL_PANEL_STATE_COMMAND__ALARM_CONTROL_PANEL_ARM_CUSTOM_BYPASS = 5,
	ALARM_CONTROL_PANEL_STATE_COMMAND__ALARM_CONTROL_PANEL_TRIGGER =
		6 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ALARM_CONTROL_PANEL_STATE_COMMAND)
} AlarmControlPanelStateCommand;
/*
 * ===================== TEXT =====================
 */
typedef enum _TextMode {
	TEXT_MODE__TEXT_MODE_TEXT = 0,
	TEXT_MODE__TEXT_MODE_PASSWORD = 1 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TEXT_MODE)
} TextMode;
typedef enum _ValveOperation {
	VALVE_OPERATION__VALVE_OPERATION_IDLE = 0,
	VALVE_OPERATION__VALVE_OPERATION_IS_OPENING = 1,
	VALVE_OPERATION__VALVE_OPERATION_IS_CLOSING =
		2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VALVE_OPERATION)
} ValveOperation;
typedef enum _UpdateCommand {
	UPDATE_COMMAND__UPDATE_COMMAND_NONE = 0,
	UPDATE_COMMAND__UPDATE_COMMAND_UPDATE = 1,
	UPDATE_COMMAND__UPDATE_COMMAND_CHECK =
		2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(UPDATE_COMMAND)
} UpdateCommand;

/* --- messages --- */

/*
 * Message sent at the beginning of each connection
 * Can only be sent by the client and only at the beginning of the connection
 */
struct HelloRequest {
	ProtobufCMessage base;
	/*
	 * Description of client (like User Agent)
	 * For example "Home Assistant"
	 * Not strictly necessary to send but nice for debugging
	 * purposes.
	 */
	char *client_info;
	uint32_t api_version_major;
	uint32_t api_version_minor;
};
#define HELLO_REQUEST__INIT                                                                        \
	{PROTOBUF_C_MESSAGE_INIT(&hello_request__descriptor), (char *)protobuf_c_empty_string, 0, 0}

/*
 * Confirmation of successful connection request.
 * Can only be sent by the server and only at the beginning of the connection
 */
struct HelloResponse {
	ProtobufCMessage base;
	/*
	 * The version of the API to use. The _client_ (for example Home Assistant) needs to check
	 * for compatibility and if necessary adopt to an older API.
	 * Major is for breaking changes in the base protocol - a mismatch will lead to immediate
	 * disconnect_client_ Minor is for breaking changes in individual messages - a mismatch will
	 * lead to a warning message
	 */
	uint32_t api_version_major;
	uint32_t api_version_minor;
	/*
	 * A string identifying the server (ESP); like client info this may be empty
	 * and only exists for debugging/logging purposes.
	 * For example "ESPHome v1.10.0 on ESP8266"
	 */
	char *server_info;
	/*
	 * The name of the server (App.get_name())
	 */
	char *name;
};
#define HELLO_RESPONSE__INIT                                                                       \
	{PROTOBUF_C_MESSAGE_INIT(&hello_response__descriptor), 0, 0,                               \
	 (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string}

/*
 * Message sent at the beginning of each connection to authenticate the client
 * Can only be sent by the client and only at the beginning of the connection
 */
struct ConnectRequest {
	ProtobufCMessage base;
	/*
	 * The password to log in with
	 */
	char *password;
};
#define CONNECT_REQUEST__INIT                                                                      \
	{PROTOBUF_C_MESSAGE_INIT(&connect_request__descriptor), (char *)protobuf_c_empty_string}

/*
 * Confirmation of successful connection. After this the connection is available for all traffic.
 * Can only be sent by the server and only at the beginning of the connection
 */
struct ConnectResponse {
	ProtobufCMessage base;
	protobuf_c_boolean invalid_password;
};
#define CONNECT_RESPONSE__INIT {PROTOBUF_C_MESSAGE_INIT(&connect_response__descriptor), 0}

/*
 * Request to close the connection.
 * Can be sent by both the client and server
 */
struct DisconnectRequest {
	ProtobufCMessage base;
};
#define DISCONNECT_REQUEST__INIT {PROTOBUF_C_MESSAGE_INIT(&disconnect_request__descriptor)}

struct DisconnectResponse {
	ProtobufCMessage base;
};
#define DISCONNECT_RESPONSE__INIT {PROTOBUF_C_MESSAGE_INIT(&disconnect_response__descriptor)}

struct PingRequest {
	ProtobufCMessage base;
};
#define PING_REQUEST__INIT {PROTOBUF_C_MESSAGE_INIT(&ping_request__descriptor)}

struct PingResponse {
	ProtobufCMessage base;
};
#define PING_RESPONSE__INIT {PROTOBUF_C_MESSAGE_INIT(&ping_response__descriptor)}

struct DeviceInfoRequest {
	ProtobufCMessage base;
};
#define DEVICE_INFO_REQUEST__INIT {PROTOBUF_C_MESSAGE_INIT(&device_info_request__descriptor)}

struct DeviceInfoResponse {
	ProtobufCMessage base;
	protobuf_c_boolean uses_password;
	/*
	 * The name of the node, given by "App.set_name()"
	 */
	char *name;
	/*
	 * The mac address of the device. For example "AC:BC:32:89:0E:A9"
	 */
	char *mac_address;
	/*
	 * A string describing the ESPHome version. For example "1.10.0"
	 */
	char *esphome_version;
	/*
	 * A string describing the date of compilation, this is generated by the compiler
	 * and therefore may not be in the same format all the time.
	 * If the user isn't using ESPHome, this will also not be set.
	 */
	char *compilation_time;
	/*
	 * The model of the board. For example NodeMCU
	 */
	char *model;
	protobuf_c_boolean has_deep_sleep;
	/*
	 * The esphome project details if set
	 */
	char *project_name;
	char *project_version;
	uint32_t webserver_port;
	uint32_t legacy_bluetooth_proxy_version;
	uint32_t bluetooth_proxy_feature_flags;
	char *manufacturer;
	char *friendly_name;
	uint32_t legacy_voice_assistant_version;
	uint32_t voice_assistant_feature_flags;
	char *suggested_area;
};
#define DEVICE_INFO_RESPONSE__INIT                                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&device_info_response__descriptor),                               \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string}

struct ListEntitiesRequest {
	ProtobufCMessage base;
};
#define LIST_ENTITIES_REQUEST__INIT {PROTOBUF_C_MESSAGE_INIT(&list_entities_request__descriptor)}

struct ListEntitiesDoneResponse {
	ProtobufCMessage base;
};
#define LIST_ENTITIES_DONE_RESPONSE__INIT                                                          \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_done_response__descriptor)}

struct SubscribeStatesRequest {
	ProtobufCMessage base;
};
#define SUBSCRIBE_STATES_REQUEST__INIT                                                             \
	{PROTOBUF_C_MESSAGE_INIT(&subscribe_states_request__descriptor)}

/*
 * ==================== BINARY SENSOR ====================
 */
struct ListEntitiesBinarySensorResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *device_class;
	protobuf_c_boolean is_status_binary_sensor;
	protobuf_c_boolean disabled_by_default;
	char *icon;
	EntityCategory entity_category;
};
#define LIST_ENTITIES_BINARY_SENSOR_RESPONSE__INIT                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_binary_sensor_response__descriptor),               \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE}

struct BinarySensorStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	protobuf_c_boolean state;
	/*
	 * If the binary sensor does not have a valid state yet.
	 * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	 */
	protobuf_c_boolean missing_state;
};
#define BINARY_SENSOR_STATE_RESPONSE__INIT                                                         \
	{PROTOBUF_C_MESSAGE_INIT(&binary_sensor_state_response__descriptor), 0, 0, 0}

/*
 * ==================== COVER ====================
 */
struct ListEntitiesCoverResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	protobuf_c_boolean assumed_state;
	protobuf_c_boolean supports_position;
	protobuf_c_boolean supports_tilt;
	char *device_class;
	protobuf_c_boolean disabled_by_default;
	char *icon;
	EntityCategory entity_category;
	protobuf_c_boolean supports_stop;
};
#define LIST_ENTITIES_COVER_RESPONSE__INIT                                                         \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_cover_response__descriptor),                       \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 0}

struct CoverStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	/*
	 * legacy: state has been removed in 1.13
	 * clients/servers must still send/accept it until the next protocol change
	 */
	LegacyCoverState legacy_state;
	float position;
	float tilt;
	CoverOperation current_operation;
};
#define COVER_STATE_RESPONSE__INIT                                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&cover_state_response__descriptor),                               \
	 0,                                                                                        \
	 LEGACY_COVER_STATE__LEGACY_COVER_STATE_OPEN,                                              \
	 0,                                                                                        \
	 0,                                                                                        \
	 COVER_OPERATION__COVER_OPERATION_IDLE}

struct CoverCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	/*
	 * legacy: command has been removed in 1.13
	 * clients/servers must still send/accept it until the next protocol change
	 */
	protobuf_c_boolean has_legacy_command;
	LegacyCoverCommand legacy_command;
	protobuf_c_boolean has_position;
	float position;
	protobuf_c_boolean has_tilt;
	float tilt;
	protobuf_c_boolean stop;
};
#define COVER_COMMAND_REQUEST__INIT                                                                \
	{PROTOBUF_C_MESSAGE_INIT(&cover_command_request__descriptor),                              \
	 0,                                                                                        \
	 0,                                                                                        \
	 LEGACY_COVER_COMMAND__LEGACY_COVER_COMMAND_OPEN,                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0}

/*
 * ==================== FAN ====================
 */
struct ListEntitiesFanResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	protobuf_c_boolean supports_oscillation;
	protobuf_c_boolean supports_speed;
	protobuf_c_boolean supports_direction;
	int32_t supported_speed_count;
	protobuf_c_boolean disabled_by_default;
	char *icon;
	EntityCategory entity_category;
	size_t n_supported_preset_modes;
	char **supported_preset_modes;
};
#define LIST_ENTITIES_FAN_RESPONSE__INIT                                                           \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_fan_response__descriptor),                         \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 0,                                                                                        \
	 NULL}

struct FanStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	protobuf_c_boolean state;
	protobuf_c_boolean oscillating;
	FanSpeed speed PROTOBUF_C__DEPRECATED;
	FanDirection direction;
	int32_t speed_level;
	char *preset_mode;
};
#define FAN_STATE_RESPONSE__INIT                                                                   \
	{PROTOBUF_C_MESSAGE_INIT(&fan_state_response__descriptor),                                 \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 FAN_SPEED__FAN_SPEED_LOW,                                                                 \
	 FAN_DIRECTION__FAN_DIRECTION_FORWARD,                                                     \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string}

struct FanCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	protobuf_c_boolean has_state;
	protobuf_c_boolean state;
	protobuf_c_boolean has_speed PROTOBUF_C__DEPRECATED;
	FanSpeed speed PROTOBUF_C__DEPRECATED;
	protobuf_c_boolean has_oscillating;
	protobuf_c_boolean oscillating;
	protobuf_c_boolean has_direction;
	FanDirection direction;
	protobuf_c_boolean has_speed_level;
	int32_t speed_level;
	protobuf_c_boolean has_preset_mode;
	char *preset_mode;
};
#define FAN_COMMAND_REQUEST__INIT                                                                  \
	{PROTOBUF_C_MESSAGE_INIT(&fan_command_request__descriptor),                                \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 FAN_SPEED__FAN_SPEED_LOW,                                                                 \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 FAN_DIRECTION__FAN_DIRECTION_FORWARD,                                                     \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string}

struct ListEntitiesLightResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	size_t n_supported_color_modes;
	ColorMode *supported_color_modes;
	/*
	 * next four supports_* are for legacy clients, newer clients should use color modes
	 */
	protobuf_c_boolean legacy_supports_brightness PROTOBUF_C__DEPRECATED;
	protobuf_c_boolean legacy_supports_rgb PROTOBUF_C__DEPRECATED;
	protobuf_c_boolean legacy_supports_white_value PROTOBUF_C__DEPRECATED;
	protobuf_c_boolean legacy_supports_color_temperature PROTOBUF_C__DEPRECATED;
	float min_mireds;
	float max_mireds;
	size_t n_effects;
	char **effects;
	protobuf_c_boolean disabled_by_default;
	char *icon;
	EntityCategory entity_category;
};
#define LIST_ENTITIES_LIGHT_RESPONSE__INIT                                                         \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_light_response__descriptor),                       \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE}

struct LightStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	protobuf_c_boolean state;
	float brightness;
	ColorMode color_mode;
	float color_brightness;
	float red;
	float green;
	float blue;
	float white;
	float color_temperature;
	float cold_white;
	float warm_white;
	char *effect;
};
#define LIGHT_STATE_RESPONSE__INIT                                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&light_state_response__descriptor),                               \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 COLOR_MODE__COLOR_MODE_UNKNOWN,                                                           \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string}

struct LightCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	protobuf_c_boolean has_state;
	protobuf_c_boolean state;
	protobuf_c_boolean has_brightness;
	float brightness;
	protobuf_c_boolean has_color_mode;
	ColorMode color_mode;
	protobuf_c_boolean has_color_brightness;
	float color_brightness;
	protobuf_c_boolean has_rgb;
	float red;
	float green;
	float blue;
	protobuf_c_boolean has_white;
	float white;
	protobuf_c_boolean has_color_temperature;
	float color_temperature;
	protobuf_c_boolean has_cold_white;
	float cold_white;
	protobuf_c_boolean has_warm_white;
	float warm_white;
	protobuf_c_boolean has_transition_length;
	uint32_t transition_length;
	protobuf_c_boolean has_flash_length;
	uint32_t flash_length;
	protobuf_c_boolean has_effect;
	char *effect;
};
#define LIGHT_COMMAND_REQUEST__INIT                                                                \
	{PROTOBUF_C_MESSAGE_INIT(&light_command_request__descriptor),                              \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 COLOR_MODE__COLOR_MODE_UNKNOWN,                                                           \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string}

struct ListEntitiesSensorResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	char *unit_of_measurement;
	int32_t accuracy_decimals;
	protobuf_c_boolean force_update;
	char *device_class;
	SensorStateClass state_class;
	/*
	 * Last reset type removed in 2021.9.0
	 */
	SensorLastResetType legacy_last_reset_type;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
};
#define LIST_ENTITIES_SENSOR_RESPONSE__INIT                                                        \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_sensor_response__descriptor),                      \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 SENSOR_STATE_CLASS__STATE_CLASS_NONE,                                                     \
	 SENSOR_LAST_RESET_TYPE__LAST_RESET_NONE,                                                  \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE}

struct SensorStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	float state;
	/*
	 * If the sensor does not have a valid state yet.
	 * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	 */
	protobuf_c_boolean missing_state;
};
#define SENSOR_STATE_RESPONSE__INIT                                                                \
	{PROTOBUF_C_MESSAGE_INIT(&sensor_state_response__descriptor), 0, 0, 0}

/*
 * ==================== SWITCH ====================
 */
struct ListEntitiesSwitchResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean assumed_state;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
	char *device_class;
};
#define LIST_ENTITIES_SWITCH_RESPONSE__INIT                                                        \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_switch_response__descriptor),                      \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 (char *)protobuf_c_empty_string}

struct SwitchStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	protobuf_c_boolean state;
};
#define SWITCH_STATE_RESPONSE__INIT                                                                \
	{PROTOBUF_C_MESSAGE_INIT(&switch_state_response__descriptor), 0, 0}

struct SwitchCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	protobuf_c_boolean state;
};
#define SWITCH_COMMAND_REQUEST__INIT                                                               \
	{PROTOBUF_C_MESSAGE_INIT(&switch_command_request__descriptor), 0, 0}

/*
 * ==================== TEXT SENSOR ====================
 */
struct ListEntitiesTextSensorResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
	char *device_class;
};
#define LIST_ENTITIES_TEXT_SENSOR_RESPONSE__INIT                                                   \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_text_sensor_response__descriptor),                 \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 (char *)protobuf_c_empty_string}

struct TextSensorStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	char *state;
	/*
	 * If the text sensor does not have a valid state yet.
	 * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	 */
	protobuf_c_boolean missing_state;
};
#define TEXT_SENSOR_STATE_RESPONSE__INIT                                                           \
	{PROTOBUF_C_MESSAGE_INIT(&text_sensor_state_response__descriptor), 0,                      \
	 (char *)protobuf_c_empty_string, 0}

struct SubscribeLogsRequest {
	ProtobufCMessage base;
	LogLevel level;
	protobuf_c_boolean dump_config;
};
#define SUBSCRIBE_LOGS_REQUEST__INIT                                                               \
	{PROTOBUF_C_MESSAGE_INIT(&subscribe_logs_request__descriptor), LOG_LEVEL__LOG_LEVEL_NONE, 0}

struct SubscribeLogsResponse {
	ProtobufCMessage base;
	LogLevel level;
	char *message;
	protobuf_c_boolean send_failed;
};
#define SUBSCRIBE_LOGS_RESPONSE__INIT                                                              \
	{PROTOBUF_C_MESSAGE_INIT(&subscribe_logs_response__descriptor), LOG_LEVEL__LOG_LEVEL_NONE, \
	 (char *)protobuf_c_empty_string, 0}

/*
 * ==================== HOMEASSISTANT.SERVICE ====================
 */
struct SubscribeHomeassistantServicesRequest {
	ProtobufCMessage base;
};
#define SUBSCRIBE_HOMEASSISTANT_SERVICES_REQUEST__INIT                                             \
	{PROTOBUF_C_MESSAGE_INIT(&subscribe_homeassistant_services_request__descriptor)}

struct HomeassistantServiceMap {
	ProtobufCMessage base;
	char *key;
	char *value;
};
#define HOMEASSISTANT_SERVICE_MAP__INIT                                                            \
	{PROTOBUF_C_MESSAGE_INIT(&homeassistant_service_map__descriptor),                          \
	 (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string}

struct HomeassistantServiceResponse {
	ProtobufCMessage base;
	char *service;
	size_t n_data;
	HomeassistantServiceMap **data;
	size_t n_data_template;
	HomeassistantServiceMap **data_template;
	size_t n_variables;
	HomeassistantServiceMap **variables;
	protobuf_c_boolean is_event;
};
#define HOMEASSISTANT_SERVICE_RESPONSE__INIT                                                       \
	{PROTOBUF_C_MESSAGE_INIT(&homeassistant_service_response__descriptor),                     \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0}

/*
 * ==================== IMPORT HOME ASSISTANT STATES ====================
 * 1. Client sends SubscribeHomeAssistantStatesRequest
 * 2. Server responds with zero or more SubscribeHomeAssistantStateResponse (async)
 * 3. Client sends HomeAssistantStateResponse for state changes.
 */
struct SubscribeHomeAssistantStatesRequest {
	ProtobufCMessage base;
};
#define SUBSCRIBE_HOME_ASSISTANT_STATES_REQUEST__INIT                                              \
	{PROTOBUF_C_MESSAGE_INIT(&subscribe_home_assistant_states_request__descriptor)}

struct SubscribeHomeAssistantStateResponse {
	ProtobufCMessage base;
	char *entity_id;
	char *attribute;
	protobuf_c_boolean once;
};
#define SUBSCRIBE_HOME_ASSISTANT_STATE_RESPONSE__INIT                                              \
	{PROTOBUF_C_MESSAGE_INIT(&subscribe_home_assistant_state_response__descriptor),            \
	 (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0}

struct HomeAssistantStateResponse {
	ProtobufCMessage base;
	char *entity_id;
	char *state;
	char *attribute;
};
#define HOME_ASSISTANT_STATE_RESPONSE__INIT                                                        \
	{PROTOBUF_C_MESSAGE_INIT(&home_assistant_state_response__descriptor),                      \
	 (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string,                         \
	 (char *)protobuf_c_empty_string}

/*
 * ==================== IMPORT TIME ====================
 */
struct GetTimeRequest {
	ProtobufCMessage base;
};
#define GET_TIME_REQUEST__INIT {PROTOBUF_C_MESSAGE_INIT(&get_time_request__descriptor)}

struct GetTimeResponse {
	ProtobufCMessage base;
	uint32_t epoch_seconds;
};
#define GET_TIME_RESPONSE__INIT {PROTOBUF_C_MESSAGE_INIT(&get_time_response__descriptor), 0}

struct ListEntitiesServicesArgument {
	ProtobufCMessage base;
	char *name;
	ServiceArgType type;
};
#define LIST_ENTITIES_SERVICES_ARGUMENT__INIT                                                      \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_services_argument__descriptor),                    \
	 (char *)protobuf_c_empty_string, SERVICE_ARG_TYPE__SERVICE_ARG_TYPE_BOOL}

struct ListEntitiesServicesResponse {
	ProtobufCMessage base;
	char *name;
	uint32_t key;
	size_t n_args;
	ListEntitiesServicesArgument **args;
};
#define LIST_ENTITIES_SERVICES_RESPONSE__INIT                                                      \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_services_response__descriptor),                    \
	 (char *)protobuf_c_empty_string, 0, 0, NULL}

struct ExecuteServiceArgument {
	ProtobufCMessage base;
	protobuf_c_boolean bool_;
	int32_t legacy_int;
	float float_;
	char *string_;
	/*
	 * ESPHome 1.14 (api v1.3) make int a signed value
	 */
	int32_t int_;
	size_t n_bool_array;
	protobuf_c_boolean *bool_array;
	size_t n_int_array;
	int32_t *int_array;
	size_t n_float_array;
	float *float_array;
	size_t n_string_array;
	char **string_array;
};
#define EXECUTE_SERVICE_ARGUMENT__INIT                                                             \
	{PROTOBUF_C_MESSAGE_INIT(&execute_service_argument__descriptor),                           \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL}

struct ExecuteServiceRequest {
	ProtobufCMessage base;
	uint32_t key;
	size_t n_args;
	ExecuteServiceArgument **args;
};
#define EXECUTE_SERVICE_REQUEST__INIT                                                              \
	{PROTOBUF_C_MESSAGE_INIT(&execute_service_request__descriptor), 0, 0, NULL}

/*
 * ==================== CAMERA ====================
 */
struct ListEntitiesCameraResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	protobuf_c_boolean disabled_by_default;
	char *icon;
	EntityCategory entity_category;
};
#define LIST_ENTITIES_CAMERA_RESPONSE__INIT                                                        \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_camera_response__descriptor),                      \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE}

struct CameraImageResponse {
	ProtobufCMessage base;
	uint32_t key;
	ProtobufCBinaryData data;
	protobuf_c_boolean done;
};
#define CAMERA_IMAGE_RESPONSE__INIT                                                                \
	{PROTOBUF_C_MESSAGE_INIT(&camera_image_response__descriptor), 0, {0, NULL}, 0}

struct CameraImageRequest {
	ProtobufCMessage base;
	protobuf_c_boolean single;
	protobuf_c_boolean stream;
};
#define CAMERA_IMAGE_REQUEST__INIT                                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&camera_image_request__descriptor), 0, 0}

struct ListEntitiesClimateResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	protobuf_c_boolean supports_current_temperature;
	protobuf_c_boolean supports_two_point_target_temperature;
	size_t n_supported_modes;
	ClimateMode *supported_modes;
	float visual_min_temperature;
	float visual_max_temperature;
	float visual_target_temperature_step;
	/*
	 * for older peer versions - in new system this
	 * is if CLIMATE_PRESET_AWAY exists is supported_presets
	 */
	protobuf_c_boolean legacy_supports_away;
	protobuf_c_boolean supports_action;
	size_t n_supported_fan_modes;
	ClimateFanMode *supported_fan_modes;
	size_t n_supported_swing_modes;
	ClimateSwingMode *supported_swing_modes;
	size_t n_supported_custom_fan_modes;
	char **supported_custom_fan_modes;
	size_t n_supported_presets;
	ClimatePreset *supported_presets;
	size_t n_supported_custom_presets;
	char **supported_custom_presets;
	protobuf_c_boolean disabled_by_default;
	char *icon;
	EntityCategory entity_category;
	float visual_current_temperature_step;
	protobuf_c_boolean supports_current_humidity;
	protobuf_c_boolean supports_target_humidity;
	float visual_min_humidity;
	float visual_max_humidity;
};
#define LIST_ENTITIES_CLIMATE_RESPONSE__INIT                                                       \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_climate_response__descriptor),                     \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0}

struct ClimateStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	ClimateMode mode;
	float current_temperature;
	float target_temperature;
	float target_temperature_low;
	float target_temperature_high;
	protobuf_c_boolean unused_legacy_away;
	ClimateAction action;
	ClimateFanMode fan_mode;
	ClimateSwingMode swing_mode;
	char *custom_fan_mode;
	ClimatePreset preset;
	char *custom_preset;
	float current_humidity;
	float target_humidity;
};
#define CLIMATE_STATE_RESPONSE__INIT                                                               \
	{PROTOBUF_C_MESSAGE_INIT(&climate_state_response__descriptor),                             \
	 0,                                                                                        \
	 CLIMATE_MODE__CLIMATE_MODE_OFF,                                                           \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 CLIMATE_ACTION__CLIMATE_ACTION_OFF,                                                       \
	 CLIMATE_FAN_MODE__CLIMATE_FAN_ON,                                                         \
	 CLIMATE_SWING_MODE__CLIMATE_SWING_OFF,                                                    \
	 (char *)protobuf_c_empty_string,                                                          \
	 CLIMATE_PRESET__CLIMATE_PRESET_NONE,                                                      \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0}

struct ClimateCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	protobuf_c_boolean has_mode;
	ClimateMode mode;
	protobuf_c_boolean has_target_temperature;
	float target_temperature;
	protobuf_c_boolean has_target_temperature_low;
	float target_temperature_low;
	protobuf_c_boolean has_target_temperature_high;
	float target_temperature_high;
	protobuf_c_boolean unused_has_legacy_away;
	protobuf_c_boolean unused_legacy_away;
	protobuf_c_boolean has_fan_mode;
	ClimateFanMode fan_mode;
	protobuf_c_boolean has_swing_mode;
	ClimateSwingMode swing_mode;
	protobuf_c_boolean has_custom_fan_mode;
	char *custom_fan_mode;
	protobuf_c_boolean has_preset;
	ClimatePreset preset;
	protobuf_c_boolean has_custom_preset;
	char *custom_preset;
	protobuf_c_boolean has_target_humidity;
	float target_humidity;
};
#define CLIMATE_COMMAND_REQUEST__INIT                                                              \
	{PROTOBUF_C_MESSAGE_INIT(&climate_command_request__descriptor),                            \
	 0,                                                                                        \
	 0,                                                                                        \
	 CLIMATE_MODE__CLIMATE_MODE_OFF,                                                           \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 CLIMATE_FAN_MODE__CLIMATE_FAN_ON,                                                         \
	 0,                                                                                        \
	 CLIMATE_SWING_MODE__CLIMATE_SWING_OFF,                                                    \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 CLIMATE_PRESET__CLIMATE_PRESET_NONE,                                                      \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0}

struct ListEntitiesNumberResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	float min_value;
	float max_value;
	float step;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
	char *unit_of_measurement;
	NumberMode mode;
	char *device_class;
};
#define LIST_ENTITIES_NUMBER_RESPONSE__INIT                                                        \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_number_response__descriptor),                      \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 (char *)protobuf_c_empty_string,                                                          \
	 NUMBER_MODE__NUMBER_MODE_AUTO,                                                            \
	 (char *)protobuf_c_empty_string}

struct NumberStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	float state;
	/*
	 * If the number does not have a valid state yet.
	 * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	 */
	protobuf_c_boolean missing_state;
};
#define NUMBER_STATE_RESPONSE__INIT                                                                \
	{PROTOBUF_C_MESSAGE_INIT(&number_state_response__descriptor), 0, 0, 0}

struct NumberCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	float state;
};
#define NUMBER_COMMAND_REQUEST__INIT                                                               \
	{PROTOBUF_C_MESSAGE_INIT(&number_command_request__descriptor), 0, 0}

/*
 * ==================== SELECT ====================
 */
struct ListEntitiesSelectResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	size_t n_options;
	char **options;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
};
#define LIST_ENTITIES_SELECT_RESPONSE__INIT                                                        \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_select_response__descriptor),                      \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE}

struct SelectStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	char *state;
	/*
	 * If the select does not have a valid state yet.
	 * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	 */
	protobuf_c_boolean missing_state;
};
#define SELECT_STATE_RESPONSE__INIT                                                                \
	{PROTOBUF_C_MESSAGE_INIT(&select_state_response__descriptor), 0,                           \
	 (char *)protobuf_c_empty_string, 0}

struct SelectCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	char *state;
};
#define SELECT_COMMAND_REQUEST__INIT                                                               \
	{PROTOBUF_C_MESSAGE_INIT(&select_command_request__descriptor), 0,                          \
	 (char *)protobuf_c_empty_string}

struct ListEntitiesLockResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
	protobuf_c_boolean assumed_state;
	protobuf_c_boolean supports_open;
	protobuf_c_boolean requires_code;
	/*
	 * Not yet implemented:
	 */
	char *code_format;
};
#define LIST_ENTITIES_LOCK_RESPONSE__INIT                                                          \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_lock_response__descriptor),                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string}

struct LockStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	LockState state;
};
#define LOCK_STATE_RESPONSE__INIT                                                                  \
	{PROTOBUF_C_MESSAGE_INIT(&lock_state_response__descriptor), 0, LOCK_STATE__LOCK_STATE_NONE}

struct LockCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	LockCommand command;
	/*
	 * Not yet implemented:
	 */
	protobuf_c_boolean has_code;
	char *code;
};
#define LOCK_COMMAND_REQUEST__INIT                                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&lock_command_request__descriptor), 0, LOCK_COMMAND__LOCK_UNLOCK, \
	 0, (char *)protobuf_c_empty_string}

/*
 * ==================== BUTTON ====================
 */
struct ListEntitiesButtonResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
	char *device_class;
};
#define LIST_ENTITIES_BUTTON_RESPONSE__INIT                                                        \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_button_response__descriptor),                      \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 (char *)protobuf_c_empty_string}

struct ButtonCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
};
#define BUTTON_COMMAND_REQUEST__INIT                                                               \
	{PROTOBUF_C_MESSAGE_INIT(&button_command_request__descriptor), 0}

struct MediaPlayerSupportedFormat {
	ProtobufCMessage base;
	char *format;
	uint32_t sample_rate;
	uint32_t num_channels;
	MediaPlayerFormatPurpose purpose;
	uint32_t sample_bytes;
};
#define MEDIA_PLAYER_SUPPORTED_FORMAT__INIT                                                        \
	{PROTOBUF_C_MESSAGE_INIT(&media_player_supported_format__descriptor),                      \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 MEDIA_PLAYER_FORMAT_PURPOSE__MEDIA_PLAYER_FORMAT_PURPOSE_DEFAULT,                         \
	 0}

struct ListEntitiesMediaPlayerResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
	protobuf_c_boolean supports_pause;
	size_t n_supported_formats;
	MediaPlayerSupportedFormat **supported_formats;
};
#define LIST_ENTITIES_MEDIA_PLAYER_RESPONSE__INIT                                                  \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_media_player_response__descriptor),                \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 0,                                                                                        \
	 0,                                                                                        \
	 NULL}

struct MediaPlayerStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	MediaPlayerState state;
	float volume;
	protobuf_c_boolean muted;
};
#define MEDIA_PLAYER_STATE_RESPONSE__INIT                                                          \
	{PROTOBUF_C_MESSAGE_INIT(&media_player_state_response__descriptor), 0,                     \
	 MEDIA_PLAYER_STATE__MEDIA_PLAYER_STATE_NONE, 0, 0}

struct MediaPlayerCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	protobuf_c_boolean has_command;
	MediaPlayerCommand command;
	protobuf_c_boolean has_volume;
	float volume;
	protobuf_c_boolean has_media_url;
	char *media_url;
	protobuf_c_boolean has_announcement;
	protobuf_c_boolean announcement;
};
#define MEDIA_PLAYER_COMMAND_REQUEST__INIT                                                         \
	{PROTOBUF_C_MESSAGE_INIT(&media_player_command_request__descriptor),                       \
	 0,                                                                                        \
	 0,                                                                                        \
	 MEDIA_PLAYER_COMMAND__MEDIA_PLAYER_COMMAND_PLAY,                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0}

/*
 * ==================== BLUETOOTH ====================
 */
struct SubscribeBluetoothLEAdvertisementsRequest {
	ProtobufCMessage base;
	uint32_t flags;
};
#define SUBSCRIBE_BLUETOOTH_LEADVERTISEMENTS_REQUEST__INIT                                         \
	{PROTOBUF_C_MESSAGE_INIT(&subscribe_bluetooth_leadvertisements_request__descriptor), 0}

struct BluetoothServiceData {
	ProtobufCMessage base;
	char *uuid;
	size_t n_legacy_data PROTOBUF_C__DEPRECATED;
	uint32_t *legacy_data PROTOBUF_C__DEPRECATED;
	/*
	 * Changed in proto version 1.7
	 */
	ProtobufCBinaryData data;
};
#define BLUETOOTH_SERVICE_DATA__INIT                                                               \
	{                                                                                          \
		PROTOBUF_C_MESSAGE_INIT(&bluetooth_service_data__descriptor)                       \
		, (char *)protobuf_c_empty_string, 0, NULL,                                        \
		{                                                                                  \
			0, NULL                                                                    \
		}                                                                                  \
	}

struct BluetoothLEAdvertisementResponse {
	ProtobufCMessage base;
	uint64_t address;
	char *name;
	int32_t rssi;
	size_t n_service_uuids;
	char **service_uuids;
	size_t n_service_data;
	BluetoothServiceData **service_data;
	size_t n_manufacturer_data;
	BluetoothServiceData **manufacturer_data;
	uint32_t address_type;
};
#define BLUETOOTH_LEADVERTISEMENT_RESPONSE__INIT                                                   \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_leadvertisement_response__descriptor),                 \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0}

struct BluetoothLERawAdvertisement {
	ProtobufCMessage base;
	uint64_t address;
	int32_t rssi;
	uint32_t address_type;
	ProtobufCBinaryData data;
};
#define BLUETOOTH_LERAW_ADVERTISEMENT__INIT                                                        \
	{                                                                                          \
		PROTOBUF_C_MESSAGE_INIT(&bluetooth_leraw_advertisement__descriptor)                \
		, 0, 0, 0,                                                                         \
		{                                                                                  \
			0, NULL                                                                    \
		}                                                                                  \
	}

struct BluetoothLERawAdvertisementsResponse {
	ProtobufCMessage base;
	size_t n_advertisements;
	BluetoothLERawAdvertisement **advertisements;
};
#define BLUETOOTH_LERAW_ADVERTISEMENTS_RESPONSE__INIT                                              \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_leraw_advertisements_response__descriptor), 0, NULL}

struct BluetoothDeviceRequest {
	ProtobufCMessage base;
	uint64_t address;
	BluetoothDeviceRequestType request_type;
	protobuf_c_boolean has_address_type;
	uint32_t address_type;
};
#define BLUETOOTH_DEVICE_REQUEST__INIT                                                             \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_device_request__descriptor), 0,                        \
	 BLUETOOTH_DEVICE_REQUEST_TYPE__BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT, 0, 0}

struct BluetoothDeviceConnectionResponse {
	ProtobufCMessage base;
	uint64_t address;
	protobuf_c_boolean connected;
	uint32_t mtu;
	int32_t error;
};
#define BLUETOOTH_DEVICE_CONNECTION_RESPONSE__INIT                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_device_connection_response__descriptor), 0, 0, 0, 0}

struct BluetoothGATTGetServicesRequest {
	ProtobufCMessage base;
	uint64_t address;
};
#define BLUETOOTH_GATTGET_SERVICES_REQUEST__INIT                                                   \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattget_services_request__descriptor), 0}

struct BluetoothGATTDescriptor {
	ProtobufCMessage base;
	size_t n_uuid;
	uint64_t *uuid;
	uint32_t handle;
};
#define BLUETOOTH_GATTDESCRIPTOR__INIT                                                             \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattdescriptor__descriptor), 0, NULL, 0}

struct BluetoothGATTCharacteristic {
	ProtobufCMessage base;
	size_t n_uuid;
	uint64_t *uuid;
	uint32_t handle;
	uint32_t properties;
	size_t n_descriptors;
	BluetoothGATTDescriptor **descriptors;
};
#define BLUETOOTH_GATTCHARACTERISTIC__INIT                                                         \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattcharacteristic__descriptor), 0, NULL, 0, 0, 0, NULL}

struct BluetoothGATTService {
	ProtobufCMessage base;
	size_t n_uuid;
	uint64_t *uuid;
	uint32_t handle;
	size_t n_characteristics;
	BluetoothGATTCharacteristic **characteristics;
};
#define BLUETOOTH_GATTSERVICE__INIT                                                                \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattservice__descriptor), 0, NULL, 0, 0, NULL}

struct BluetoothGATTGetServicesResponse {
	ProtobufCMessage base;
	uint64_t address;
	size_t n_services;
	BluetoothGATTService **services;
};
#define BLUETOOTH_GATTGET_SERVICES_RESPONSE__INIT                                                  \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattget_services_response__descriptor), 0, 0, NULL}

struct BluetoothGATTGetServicesDoneResponse {
	ProtobufCMessage base;
	uint64_t address;
};
#define BLUETOOTH_GATTGET_SERVICES_DONE_RESPONSE__INIT                                             \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattget_services_done_response__descriptor), 0}

struct BluetoothGATTReadRequest {
	ProtobufCMessage base;
	uint64_t address;
	uint32_t handle;
};
#define BLUETOOTH_GATTREAD_REQUEST__INIT                                                           \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattread_request__descriptor), 0, 0}

struct BluetoothGATTReadResponse {
	ProtobufCMessage base;
	uint64_t address;
	uint32_t handle;
	ProtobufCBinaryData data;
};
#define BLUETOOTH_GATTREAD_RESPONSE__INIT                                                          \
	{                                                                                          \
		PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattread_response__descriptor)                  \
		, 0, 0,                                                                            \
		{                                                                                  \
			0, NULL                                                                    \
		}                                                                                  \
	}

struct BluetoothGATTWriteRequest {
	ProtobufCMessage base;
	uint64_t address;
	uint32_t handle;
	protobuf_c_boolean response;
	ProtobufCBinaryData data;
};
#define BLUETOOTH_GATTWRITE_REQUEST__INIT                                                          \
	{                                                                                          \
		PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattwrite_request__descriptor)                  \
		, 0, 0, 0,                                                                         \
		{                                                                                  \
			0, NULL                                                                    \
		}                                                                                  \
	}

struct BluetoothGATTReadDescriptorRequest {
	ProtobufCMessage base;
	uint64_t address;
	uint32_t handle;
};
#define BLUETOOTH_GATTREAD_DESCRIPTOR_REQUEST__INIT                                                \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattread_descriptor_request__descriptor), 0, 0}

struct BluetoothGATTWriteDescriptorRequest {
	ProtobufCMessage base;
	uint64_t address;
	uint32_t handle;
	ProtobufCBinaryData data;
};
#define BLUETOOTH_GATTWRITE_DESCRIPTOR_REQUEST__INIT                                               \
	{                                                                                          \
		PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattwrite_descriptor_request__descriptor)       \
		, 0, 0,                                                                            \
		{                                                                                  \
			0, NULL                                                                    \
		}                                                                                  \
	}

struct BluetoothGATTNotifyRequest {
	ProtobufCMessage base;
	uint64_t address;
	uint32_t handle;
	protobuf_c_boolean enable;
};
#define BLUETOOTH_GATTNOTIFY_REQUEST__INIT                                                         \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattnotify_request__descriptor), 0, 0, 0}

struct BluetoothGATTNotifyDataResponse {
	ProtobufCMessage base;
	uint64_t address;
	uint32_t handle;
	ProtobufCBinaryData data;
};
#define BLUETOOTH_GATTNOTIFY_DATA_RESPONSE__INIT                                                   \
	{                                                                                          \
		PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattnotify_data_response__descriptor)           \
		, 0, 0,                                                                            \
		{                                                                                  \
			0, NULL                                                                    \
		}                                                                                  \
	}

struct SubscribeBluetoothConnectionsFreeRequest {
	ProtobufCMessage base;
};
#define SUBSCRIBE_BLUETOOTH_CONNECTIONS_FREE_REQUEST__INIT                                         \
	{PROTOBUF_C_MESSAGE_INIT(&subscribe_bluetooth_connections_free_request__descriptor)}

struct BluetoothConnectionsFreeResponse {
	ProtobufCMessage base;
	uint32_t free;
	uint32_t limit;
};
#define BLUETOOTH_CONNECTIONS_FREE_RESPONSE__INIT                                                  \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_connections_free_response__descriptor), 0, 0}

struct BluetoothGATTErrorResponse {
	ProtobufCMessage base;
	uint64_t address;
	uint32_t handle;
	int32_t error;
};
#define BLUETOOTH_GATTERROR_RESPONSE__INIT                                                         \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gatterror_response__descriptor), 0, 0, 0}

struct BluetoothGATTWriteResponse {
	ProtobufCMessage base;
	uint64_t address;
	uint32_t handle;
};
#define BLUETOOTH_GATTWRITE_RESPONSE__INIT                                                         \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattwrite_response__descriptor), 0, 0}

struct BluetoothGATTNotifyResponse {
	ProtobufCMessage base;
	uint64_t address;
	uint32_t handle;
};
#define BLUETOOTH_GATTNOTIFY_RESPONSE__INIT                                                        \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_gattnotify_response__descriptor), 0, 0}

struct BluetoothDevicePairingResponse {
	ProtobufCMessage base;
	uint64_t address;
	protobuf_c_boolean paired;
	int32_t error;
};
#define BLUETOOTH_DEVICE_PAIRING_RESPONSE__INIT                                                    \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_device_pairing_response__descriptor), 0, 0, 0}

struct BluetoothDeviceUnpairingResponse {
	ProtobufCMessage base;
	uint64_t address;
	protobuf_c_boolean success;
	int32_t error;
};
#define BLUETOOTH_DEVICE_UNPAIRING_RESPONSE__INIT                                                  \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_device_unpairing_response__descriptor), 0, 0, 0}

struct UnsubscribeBluetoothLEAdvertisementsRequest {
	ProtobufCMessage base;
};
#define UNSUBSCRIBE_BLUETOOTH_LEADVERTISEMENTS_REQUEST__INIT                                       \
	{PROTOBUF_C_MESSAGE_INIT(&unsubscribe_bluetooth_leadvertisements_request__descriptor)}

struct BluetoothDeviceClearCacheResponse {
	ProtobufCMessage base;
	uint64_t address;
	protobuf_c_boolean success;
	int32_t error;
};
#define BLUETOOTH_DEVICE_CLEAR_CACHE_RESPONSE__INIT                                                \
	{PROTOBUF_C_MESSAGE_INIT(&bluetooth_device_clear_cache_response__descriptor), 0, 0, 0}

struct SubscribeVoiceAssistantRequest {
	ProtobufCMessage base;
	protobuf_c_boolean subscribe;
	uint32_t flags;
};
#define SUBSCRIBE_VOICE_ASSISTANT_REQUEST__INIT                                                    \
	{PROTOBUF_C_MESSAGE_INIT(&subscribe_voice_assistant_request__descriptor), 0, 0}

struct VoiceAssistantAudioSettings {
	ProtobufCMessage base;
	uint32_t noise_suppression_level;
	uint32_t auto_gain;
	float volume_multiplier;
};
#define VOICE_ASSISTANT_AUDIO_SETTINGS__INIT                                                       \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_audio_settings__descriptor), 0, 0, 0}

struct VoiceAssistantRequest {
	ProtobufCMessage base;
	protobuf_c_boolean start;
	char *conversation_id;
	uint32_t flags;
	VoiceAssistantAudioSettings *audio_settings;
	char *wake_word_phrase;
};
#define VOICE_ASSISTANT_REQUEST__INIT                                                              \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_request__descriptor),                            \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 (char *)protobuf_c_empty_string}

struct VoiceAssistantResponse {
	ProtobufCMessage base;
	uint32_t port;
	protobuf_c_boolean error;
};
#define VOICE_ASSISTANT_RESPONSE__INIT                                                             \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_response__descriptor), 0, 0}

struct VoiceAssistantEventData {
	ProtobufCMessage base;
	char *name;
	char *value;
};
#define VOICE_ASSISTANT_EVENT_DATA__INIT                                                           \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_event_data__descriptor),                         \
	 (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string}

struct VoiceAssistantEventResponse {
	ProtobufCMessage base;
	VoiceAssistantEvent event_type;
	size_t n_data;
	VoiceAssistantEventData **data;
};
#define VOICE_ASSISTANT_EVENT_RESPONSE__INIT                                                       \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_event_response__descriptor),                     \
	 VOICE_ASSISTANT_EVENT__VOICE_ASSISTANT_ERROR, 0, NULL}

struct VoiceAssistantAudio {
	ProtobufCMessage base;
	ProtobufCBinaryData data;
	protobuf_c_boolean end;
};
#define VOICE_ASSISTANT_AUDIO__INIT                                                                \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_audio__descriptor), {0, NULL}, 0}

struct VoiceAssistantTimerEventResponse {
	ProtobufCMessage base;
	VoiceAssistantTimerEvent event_type;
	char *timer_id;
	char *name;
	uint32_t total_seconds;
	uint32_t seconds_left;
	protobuf_c_boolean is_active;
};
#define VOICE_ASSISTANT_TIMER_EVENT_RESPONSE__INIT                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_timer_event_response__descriptor),               \
	 VOICE_ASSISTANT_TIMER_EVENT__VOICE_ASSISTANT_TIMER_STARTED,                               \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 0}

struct VoiceAssistantAnnounceRequest {
	ProtobufCMessage base;
	char *media_id;
	char *text;
};
#define VOICE_ASSISTANT_ANNOUNCE_REQUEST__INIT                                                     \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_announce_request__descriptor),                   \
	 (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string}

struct VoiceAssistantAnnounceFinished {
	ProtobufCMessage base;
	protobuf_c_boolean success;
};
#define VOICE_ASSISTANT_ANNOUNCE_FINISHED__INIT                                                    \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_announce_finished__descriptor), 0}

struct VoiceAssistantWakeWord {
	ProtobufCMessage base;
	char *id;
	char *wake_word;
	size_t n_trained_languages;
	char **trained_languages;
};
#define VOICE_ASSISTANT_WAKE_WORD__INIT                                                            \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_wake_word__descriptor),                          \
	 (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, NULL}

struct VoiceAssistantConfigurationRequest {
	ProtobufCMessage base;
};
#define VOICE_ASSISTANT_CONFIGURATION_REQUEST__INIT                                                \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_configuration_request__descriptor)}

struct VoiceAssistantConfigurationResponse {
	ProtobufCMessage base;
	size_t n_available_wake_words;
	VoiceAssistantWakeWord **available_wake_words;
	size_t n_active_wake_words;
	char **active_wake_words;
	uint32_t max_active_wake_words;
};
#define VOICE_ASSISTANT_CONFIGURATION_RESPONSE__INIT                                               \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_configuration_response__descriptor),             \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0,                                                                                        \
	 NULL,                                                                                     \
	 0}

struct VoiceAssistantSetConfiguration {
	ProtobufCMessage base;
	size_t n_active_wake_words;
	char **active_wake_words;
};
#define VOICE_ASSISTANT_SET_CONFIGURATION__INIT                                                    \
	{PROTOBUF_C_MESSAGE_INIT(&voice_assistant_set_configuration__descriptor), 0, NULL}

struct ListEntitiesAlarmControlPanelResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
	uint32_t supported_features;
	protobuf_c_boolean requires_code;
	protobuf_c_boolean requires_code_to_arm;
};
#define LIST_ENTITIES_ALARM_CONTROL_PANEL_RESPONSE__INIT                                           \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_alarm_control_panel_response__descriptor),         \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 0,                                                                                        \
	 0,                                                                                        \
	 0}

struct AlarmControlPanelStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	AlarmControlPanelState state;
};
#define ALARM_CONTROL_PANEL_STATE_RESPONSE__INIT                                                   \
	{PROTOBUF_C_MESSAGE_INIT(&alarm_control_panel_state_response__descriptor), 0,              \
	 ALARM_CONTROL_PANEL_STATE__ALARM_STATE_DISARMED}

struct AlarmControlPanelCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	AlarmControlPanelStateCommand command;
	char *code;
};
#define ALARM_CONTROL_PANEL_COMMAND_REQUEST__INIT                                                  \
	{PROTOBUF_C_MESSAGE_INIT(&alarm_control_panel_command_request__descriptor), 0,             \
	 ALARM_CONTROL_PANEL_STATE_COMMAND__ALARM_CONTROL_PANEL_DISARM,                            \
	 (char *)protobuf_c_empty_string}

struct ListEntitiesTextResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
	uint32_t min_length;
	uint32_t max_length;
	char *pattern;
	TextMode mode;
};
#define LIST_ENTITIES_TEXT_RESPONSE__INIT                                                          \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_text_response__descriptor),                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 TEXT_MODE__TEXT_MODE_TEXT}

struct TextStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	char *state;
	/*
	 * If the Text does not have a valid state yet.
	 * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	 */
	protobuf_c_boolean missing_state;
};
#define TEXT_STATE_RESPONSE__INIT                                                                  \
	{PROTOBUF_C_MESSAGE_INIT(&text_state_response__descriptor), 0,                             \
	 (char *)protobuf_c_empty_string, 0}

struct TextCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	char *state;
};
#define TEXT_COMMAND_REQUEST__INIT                                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&text_command_request__descriptor), 0,                            \
	 (char *)protobuf_c_empty_string}

/*
 * ==================== DATETIME DATE ====================
 */
struct ListEntitiesDateResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
};
#define LIST_ENTITIES_DATE_RESPONSE__INIT                                                          \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_date_response__descriptor),                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE}

struct DateStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	/*
	 * If the date does not have a valid state yet.
	 * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	 */
	protobuf_c_boolean missing_state;
	uint32_t year;
	uint32_t month;
	uint32_t day;
};
#define DATE_STATE_RESPONSE__INIT                                                                  \
	{PROTOBUF_C_MESSAGE_INIT(&date_state_response__descriptor), 0, 0, 0, 0, 0}

struct DateCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	uint32_t year;
	uint32_t month;
	uint32_t day;
};
#define DATE_COMMAND_REQUEST__INIT                                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&date_command_request__descriptor), 0, 0, 0, 0}

/*
 * ==================== DATETIME TIME ====================
 */
struct ListEntitiesTimeResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
};
#define LIST_ENTITIES_TIME_RESPONSE__INIT                                                          \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_time_response__descriptor),                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE}

struct TimeStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	/*
	 * If the time does not have a valid state yet.
	 * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	 */
	protobuf_c_boolean missing_state;
	uint32_t hour;
	uint32_t minute;
	uint32_t second;
};
#define TIME_STATE_RESPONSE__INIT                                                                  \
	{PROTOBUF_C_MESSAGE_INIT(&time_state_response__descriptor), 0, 0, 0, 0, 0}

struct TimeCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	uint32_t hour;
	uint32_t minute;
	uint32_t second;
};
#define TIME_COMMAND_REQUEST__INIT                                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&time_command_request__descriptor), 0, 0, 0, 0}

/*
 * ==================== EVENT ====================
 */
struct ListEntitiesEventResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
	char *device_class;
	size_t n_event_types;
	char **event_types;
};
#define LIST_ENTITIES_EVENT_RESPONSE__INIT                                                         \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_event_response__descriptor),                       \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 NULL}

struct EventResponse {
	ProtobufCMessage base;
	uint32_t key;
	char *event_type;
};
#define EVENT_RESPONSE__INIT                                                                       \
	{PROTOBUF_C_MESSAGE_INIT(&event_response__descriptor), 0, (char *)protobuf_c_empty_string}

/*
 * ==================== VALVE ====================
 */
struct ListEntitiesValveResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
	char *device_class;
	protobuf_c_boolean assumed_state;
	protobuf_c_boolean supports_position;
	protobuf_c_boolean supports_stop;
};
#define LIST_ENTITIES_VALVE_RESPONSE__INIT                                                         \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_valve_response__descriptor),                       \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 0,                                                                                        \
	 0}

struct ValveStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	float position;
	ValveOperation current_operation;
};
#define VALVE_STATE_RESPONSE__INIT                                                                 \
	{PROTOBUF_C_MESSAGE_INIT(&valve_state_response__descriptor), 0, 0,                         \
	 VALVE_OPERATION__VALVE_OPERATION_IDLE}

struct ValveCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	protobuf_c_boolean has_position;
	float position;
	protobuf_c_boolean stop;
};
#define VALVE_COMMAND_REQUEST__INIT                                                                \
	{PROTOBUF_C_MESSAGE_INIT(&valve_command_request__descriptor), 0, 0, 0, 0}

/*
 * ==================== DATETIME DATETIME ====================
 */
struct ListEntitiesDateTimeResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
};
#define LIST_ENTITIES_DATE_TIME_RESPONSE__INIT                                                     \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_date_time_response__descriptor),                   \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE}

struct DateTimeStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	/*
	 * If the datetime does not have a valid state yet.
	 * Equivalent to `!obj->has_state()` - inverse logic to make state packets smaller
	 */
	protobuf_c_boolean missing_state;
	uint32_t epoch_seconds;
};
#define DATE_TIME_STATE_RESPONSE__INIT                                                             \
	{PROTOBUF_C_MESSAGE_INIT(&date_time_state_response__descriptor), 0, 0, 0}

struct DateTimeCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	uint32_t epoch_seconds;
};
#define DATE_TIME_COMMAND_REQUEST__INIT                                                            \
	{PROTOBUF_C_MESSAGE_INIT(&date_time_command_request__descriptor), 0, 0}

/*
 * ==================== UPDATE ====================
 */
struct ListEntitiesUpdateResponse {
	ProtobufCMessage base;
	char *object_id;
	uint32_t key;
	char *name;
	char *unique_id;
	char *icon;
	protobuf_c_boolean disabled_by_default;
	EntityCategory entity_category;
	char *device_class;
};
#define LIST_ENTITIES_UPDATE_RESPONSE__INIT                                                        \
	{PROTOBUF_C_MESSAGE_INIT(&list_entities_update_response__descriptor),                      \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 0,                                                                                        \
	 ENTITY_CATEGORY__ENTITY_CATEGORY_NONE,                                                    \
	 (char *)protobuf_c_empty_string}

struct UpdateStateResponse {
	ProtobufCMessage base;
	uint32_t key;
	protobuf_c_boolean missing_state;
	protobuf_c_boolean in_progress;
	protobuf_c_boolean has_progress;
	float progress;
	char *current_version;
	char *latest_version;
	char *title;
	char *release_summary;
	char *release_url;
};
#define UPDATE_STATE_RESPONSE__INIT                                                                \
	{PROTOBUF_C_MESSAGE_INIT(&update_state_response__descriptor),                              \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 0,                                                                                        \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string,                                                          \
	 (char *)protobuf_c_empty_string}

struct UpdateCommandRequest {
	ProtobufCMessage base;
	uint32_t key;
	UpdateCommand command;
};
#define UPDATE_COMMAND_REQUEST__INIT                                                               \
	{PROTOBUF_C_MESSAGE_INIT(&update_command_request__descriptor), 0,                          \
	 UPDATE_COMMAND__UPDATE_COMMAND_NONE}

/* HelloRequest methods */
void hello_request__init(HelloRequest *message);
size_t hello_request__get_packed_size(const HelloRequest *message);
size_t hello_request__pack(const HelloRequest *message, uint8_t *out);
size_t hello_request__pack_to_buffer(const HelloRequest *message, ProtobufCBuffer *buffer);
HelloRequest *hello_request__unpack(ProtobufCAllocator *allocator, size_t len, const uint8_t *data);
void hello_request__free_unpacked(HelloRequest *message, ProtobufCAllocator *allocator);
/* HelloResponse methods */
void hello_response__init(HelloResponse *message);
size_t hello_response__get_packed_size(const HelloResponse *message);
size_t hello_response__pack(const HelloResponse *message, uint8_t *out);
size_t hello_response__pack_to_buffer(const HelloResponse *message, ProtobufCBuffer *buffer);
HelloResponse *hello_response__unpack(ProtobufCAllocator *allocator, size_t len,
				      const uint8_t *data);
void hello_response__free_unpacked(HelloResponse *message, ProtobufCAllocator *allocator);
/* ConnectRequest methods */
void connect_request__init(ConnectRequest *message);
size_t connect_request__get_packed_size(const ConnectRequest *message);
size_t connect_request__pack(const ConnectRequest *message, uint8_t *out);
size_t connect_request__pack_to_buffer(const ConnectRequest *message, ProtobufCBuffer *buffer);
ConnectRequest *connect_request__unpack(ProtobufCAllocator *allocator, size_t len,
					const uint8_t *data);
void connect_request__free_unpacked(ConnectRequest *message, ProtobufCAllocator *allocator);
/* ConnectResponse methods */
void connect_response__init(ConnectResponse *message);
size_t connect_response__get_packed_size(const ConnectResponse *message);
size_t connect_response__pack(const ConnectResponse *message, uint8_t *out);
size_t connect_response__pack_to_buffer(const ConnectResponse *message, ProtobufCBuffer *buffer);
ConnectResponse *connect_response__unpack(ProtobufCAllocator *allocator, size_t len,
					  const uint8_t *data);
void connect_response__free_unpacked(ConnectResponse *message, ProtobufCAllocator *allocator);
/* DisconnectRequest methods */
void disconnect_request__init(DisconnectRequest *message);
size_t disconnect_request__get_packed_size(const DisconnectRequest *message);
size_t disconnect_request__pack(const DisconnectRequest *message, uint8_t *out);
size_t disconnect_request__pack_to_buffer(const DisconnectRequest *message,
					  ProtobufCBuffer *buffer);
DisconnectRequest *disconnect_request__unpack(ProtobufCAllocator *allocator, size_t len,
					      const uint8_t *data);
void disconnect_request__free_unpacked(DisconnectRequest *message, ProtobufCAllocator *allocator);
/* DisconnectResponse methods */
void disconnect_response__init(DisconnectResponse *message);
size_t disconnect_response__get_packed_size(const DisconnectResponse *message);
size_t disconnect_response__pack(const DisconnectResponse *message, uint8_t *out);
size_t disconnect_response__pack_to_buffer(const DisconnectResponse *message,
					   ProtobufCBuffer *buffer);
DisconnectResponse *disconnect_response__unpack(ProtobufCAllocator *allocator, size_t len,
						const uint8_t *data);
void disconnect_response__free_unpacked(DisconnectResponse *message, ProtobufCAllocator *allocator);
/* PingRequest methods */
void ping_request__init(PingRequest *message);
size_t ping_request__get_packed_size(const PingRequest *message);
size_t ping_request__pack(const PingRequest *message, uint8_t *out);
size_t ping_request__pack_to_buffer(const PingRequest *message, ProtobufCBuffer *buffer);
PingRequest *ping_request__unpack(ProtobufCAllocator *allocator, size_t len, const uint8_t *data);
void ping_request__free_unpacked(PingRequest *message, ProtobufCAllocator *allocator);
/* PingResponse methods */
void ping_response__init(PingResponse *message);
size_t ping_response__get_packed_size(const PingResponse *message);
size_t ping_response__pack(const PingResponse *message, uint8_t *out);
size_t ping_response__pack_to_buffer(const PingResponse *message, ProtobufCBuffer *buffer);
PingResponse *ping_response__unpack(ProtobufCAllocator *allocator, size_t len, const uint8_t *data);
void ping_response__free_unpacked(PingResponse *message, ProtobufCAllocator *allocator);
/* DeviceInfoRequest methods */
void device_info_request__init(DeviceInfoRequest *message);
size_t device_info_request__get_packed_size(const DeviceInfoRequest *message);
size_t device_info_request__pack(const DeviceInfoRequest *message, uint8_t *out);
size_t device_info_request__pack_to_buffer(const DeviceInfoRequest *message,
					   ProtobufCBuffer *buffer);
DeviceInfoRequest *device_info_request__unpack(ProtobufCAllocator *allocator, size_t len,
					       const uint8_t *data);
void device_info_request__free_unpacked(DeviceInfoRequest *message, ProtobufCAllocator *allocator);
/* DeviceInfoResponse methods */
void device_info_response__init(DeviceInfoResponse *message);
size_t device_info_response__get_packed_size(const DeviceInfoResponse *message);
size_t device_info_response__pack(const DeviceInfoResponse *message, uint8_t *out);
size_t device_info_response__pack_to_buffer(const DeviceInfoResponse *message,
					    ProtobufCBuffer *buffer);
DeviceInfoResponse *device_info_response__unpack(ProtobufCAllocator *allocator, size_t len,
						 const uint8_t *data);
void device_info_response__free_unpacked(DeviceInfoResponse *message,
					 ProtobufCAllocator *allocator);
/* ListEntitiesRequest methods */
void list_entities_request__init(ListEntitiesRequest *message);
size_t list_entities_request__get_packed_size(const ListEntitiesRequest *message);
size_t list_entities_request__pack(const ListEntitiesRequest *message, uint8_t *out);
size_t list_entities_request__pack_to_buffer(const ListEntitiesRequest *message,
					     ProtobufCBuffer *buffer);
ListEntitiesRequest *list_entities_request__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void list_entities_request__free_unpacked(ListEntitiesRequest *message,
					  ProtobufCAllocator *allocator);
/* ListEntitiesDoneResponse methods */
void list_entities_done_response__init(ListEntitiesDoneResponse *message);
size_t list_entities_done_response__get_packed_size(const ListEntitiesDoneResponse *message);
size_t list_entities_done_response__pack(const ListEntitiesDoneResponse *message, uint8_t *out);
size_t list_entities_done_response__pack_to_buffer(const ListEntitiesDoneResponse *message,
						   ProtobufCBuffer *buffer);
ListEntitiesDoneResponse *list_entities_done_response__unpack(ProtobufCAllocator *allocator,
							      size_t len, const uint8_t *data);
void list_entities_done_response__free_unpacked(ListEntitiesDoneResponse *message,
						ProtobufCAllocator *allocator);
/* SubscribeStatesRequest methods */
void subscribe_states_request__init(SubscribeStatesRequest *message);
size_t subscribe_states_request__get_packed_size(const SubscribeStatesRequest *message);
size_t subscribe_states_request__pack(const SubscribeStatesRequest *message, uint8_t *out);
size_t subscribe_states_request__pack_to_buffer(const SubscribeStatesRequest *message,
						ProtobufCBuffer *buffer);
SubscribeStatesRequest *subscribe_states_request__unpack(ProtobufCAllocator *allocator, size_t len,
							 const uint8_t *data);
void subscribe_states_request__free_unpacked(SubscribeStatesRequest *message,
					     ProtobufCAllocator *allocator);
/* ListEntitiesBinarySensorResponse methods */
void list_entities_binary_sensor_response__init(ListEntitiesBinarySensorResponse *message);
size_t list_entities_binary_sensor_response__get_packed_size(
	const ListEntitiesBinarySensorResponse *message);
size_t list_entities_binary_sensor_response__pack(const ListEntitiesBinarySensorResponse *message,
						  uint8_t *out);
size_t list_entities_binary_sensor_response__pack_to_buffer(
	const ListEntitiesBinarySensorResponse *message, ProtobufCBuffer *buffer);
ListEntitiesBinarySensorResponse *
list_entities_binary_sensor_response__unpack(ProtobufCAllocator *allocator, size_t len,
					     const uint8_t *data);
void list_entities_binary_sensor_response__free_unpacked(ListEntitiesBinarySensorResponse *message,
							 ProtobufCAllocator *allocator);
/* BinarySensorStateResponse methods */
void binary_sensor_state_response__init(BinarySensorStateResponse *message);
size_t binary_sensor_state_response__get_packed_size(const BinarySensorStateResponse *message);
size_t binary_sensor_state_response__pack(const BinarySensorStateResponse *message, uint8_t *out);
size_t binary_sensor_state_response__pack_to_buffer(const BinarySensorStateResponse *message,
						    ProtobufCBuffer *buffer);
BinarySensorStateResponse *binary_sensor_state_response__unpack(ProtobufCAllocator *allocator,
								size_t len, const uint8_t *data);
void binary_sensor_state_response__free_unpacked(BinarySensorStateResponse *message,
						 ProtobufCAllocator *allocator);
/* ListEntitiesCoverResponse methods */
void list_entities_cover_response__init(ListEntitiesCoverResponse *message);
size_t list_entities_cover_response__get_packed_size(const ListEntitiesCoverResponse *message);
size_t list_entities_cover_response__pack(const ListEntitiesCoverResponse *message, uint8_t *out);
size_t list_entities_cover_response__pack_to_buffer(const ListEntitiesCoverResponse *message,
						    ProtobufCBuffer *buffer);
ListEntitiesCoverResponse *list_entities_cover_response__unpack(ProtobufCAllocator *allocator,
								size_t len, const uint8_t *data);
void list_entities_cover_response__free_unpacked(ListEntitiesCoverResponse *message,
						 ProtobufCAllocator *allocator);
/* CoverStateResponse methods */
void cover_state_response__init(CoverStateResponse *message);
size_t cover_state_response__get_packed_size(const CoverStateResponse *message);
size_t cover_state_response__pack(const CoverStateResponse *message, uint8_t *out);
size_t cover_state_response__pack_to_buffer(const CoverStateResponse *message,
					    ProtobufCBuffer *buffer);
CoverStateResponse *cover_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
						 const uint8_t *data);
void cover_state_response__free_unpacked(CoverStateResponse *message,
					 ProtobufCAllocator *allocator);
/* CoverCommandRequest methods */
void cover_command_request__init(CoverCommandRequest *message);
size_t cover_command_request__get_packed_size(const CoverCommandRequest *message);
size_t cover_command_request__pack(const CoverCommandRequest *message, uint8_t *out);
size_t cover_command_request__pack_to_buffer(const CoverCommandRequest *message,
					     ProtobufCBuffer *buffer);
CoverCommandRequest *cover_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void cover_command_request__free_unpacked(CoverCommandRequest *message,
					  ProtobufCAllocator *allocator);
/* ListEntitiesFanResponse methods */
void list_entities_fan_response__init(ListEntitiesFanResponse *message);
size_t list_entities_fan_response__get_packed_size(const ListEntitiesFanResponse *message);
size_t list_entities_fan_response__pack(const ListEntitiesFanResponse *message, uint8_t *out);
size_t list_entities_fan_response__pack_to_buffer(const ListEntitiesFanResponse *message,
						  ProtobufCBuffer *buffer);
ListEntitiesFanResponse *list_entities_fan_response__unpack(ProtobufCAllocator *allocator,
							    size_t len, const uint8_t *data);
void list_entities_fan_response__free_unpacked(ListEntitiesFanResponse *message,
					       ProtobufCAllocator *allocator);
/* FanStateResponse methods */
void fan_state_response__init(FanStateResponse *message);
size_t fan_state_response__get_packed_size(const FanStateResponse *message);
size_t fan_state_response__pack(const FanStateResponse *message, uint8_t *out);
size_t fan_state_response__pack_to_buffer(const FanStateResponse *message, ProtobufCBuffer *buffer);
FanStateResponse *fan_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
					     const uint8_t *data);
void fan_state_response__free_unpacked(FanStateResponse *message, ProtobufCAllocator *allocator);
/* FanCommandRequest methods */
void fan_command_request__init(FanCommandRequest *message);
size_t fan_command_request__get_packed_size(const FanCommandRequest *message);
size_t fan_command_request__pack(const FanCommandRequest *message, uint8_t *out);
size_t fan_command_request__pack_to_buffer(const FanCommandRequest *message,
					   ProtobufCBuffer *buffer);
FanCommandRequest *fan_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
					       const uint8_t *data);
void fan_command_request__free_unpacked(FanCommandRequest *message, ProtobufCAllocator *allocator);
/* ListEntitiesLightResponse methods */
void list_entities_light_response__init(ListEntitiesLightResponse *message);
size_t list_entities_light_response__get_packed_size(const ListEntitiesLightResponse *message);
size_t list_entities_light_response__pack(const ListEntitiesLightResponse *message, uint8_t *out);
size_t list_entities_light_response__pack_to_buffer(const ListEntitiesLightResponse *message,
						    ProtobufCBuffer *buffer);
ListEntitiesLightResponse *list_entities_light_response__unpack(ProtobufCAllocator *allocator,
								size_t len, const uint8_t *data);
void list_entities_light_response__free_unpacked(ListEntitiesLightResponse *message,
						 ProtobufCAllocator *allocator);
/* LightStateResponse methods */
void light_state_response__init(LightStateResponse *message);
size_t light_state_response__get_packed_size(const LightStateResponse *message);
size_t light_state_response__pack(const LightStateResponse *message, uint8_t *out);
size_t light_state_response__pack_to_buffer(const LightStateResponse *message,
					    ProtobufCBuffer *buffer);
LightStateResponse *light_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
						 const uint8_t *data);
void light_state_response__free_unpacked(LightStateResponse *message,
					 ProtobufCAllocator *allocator);
/* LightCommandRequest methods */
void light_command_request__init(LightCommandRequest *message);
size_t light_command_request__get_packed_size(const LightCommandRequest *message);
size_t light_command_request__pack(const LightCommandRequest *message, uint8_t *out);
size_t light_command_request__pack_to_buffer(const LightCommandRequest *message,
					     ProtobufCBuffer *buffer);
LightCommandRequest *light_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void light_command_request__free_unpacked(LightCommandRequest *message,
					  ProtobufCAllocator *allocator);
/* ListEntitiesSensorResponse methods */
void list_entities_sensor_response__init(ListEntitiesSensorResponse *message);
size_t list_entities_sensor_response__get_packed_size(const ListEntitiesSensorResponse *message);
size_t list_entities_sensor_response__pack(const ListEntitiesSensorResponse *message, uint8_t *out);
size_t list_entities_sensor_response__pack_to_buffer(const ListEntitiesSensorResponse *message,
						     ProtobufCBuffer *buffer);
ListEntitiesSensorResponse *list_entities_sensor_response__unpack(ProtobufCAllocator *allocator,
								  size_t len, const uint8_t *data);
void list_entities_sensor_response__free_unpacked(ListEntitiesSensorResponse *message,
						  ProtobufCAllocator *allocator);
/* SensorStateResponse methods */
void sensor_state_response__init(SensorStateResponse *message);
size_t sensor_state_response__get_packed_size(const SensorStateResponse *message);
size_t sensor_state_response__pack(const SensorStateResponse *message, uint8_t *out);
size_t sensor_state_response__pack_to_buffer(const SensorStateResponse *message,
					     ProtobufCBuffer *buffer);
SensorStateResponse *sensor_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void sensor_state_response__free_unpacked(SensorStateResponse *message,
					  ProtobufCAllocator *allocator);
/* ListEntitiesSwitchResponse methods */
void list_entities_switch_response__init(ListEntitiesSwitchResponse *message);
size_t list_entities_switch_response__get_packed_size(const ListEntitiesSwitchResponse *message);
size_t list_entities_switch_response__pack(const ListEntitiesSwitchResponse *message, uint8_t *out);
size_t list_entities_switch_response__pack_to_buffer(const ListEntitiesSwitchResponse *message,
						     ProtobufCBuffer *buffer);
ListEntitiesSwitchResponse *list_entities_switch_response__unpack(ProtobufCAllocator *allocator,
								  size_t len, const uint8_t *data);
void list_entities_switch_response__free_unpacked(ListEntitiesSwitchResponse *message,
						  ProtobufCAllocator *allocator);
/* SwitchStateResponse methods */
void switch_state_response__init(SwitchStateResponse *message);
size_t switch_state_response__get_packed_size(const SwitchStateResponse *message);
size_t switch_state_response__pack(const SwitchStateResponse *message, uint8_t *out);
size_t switch_state_response__pack_to_buffer(const SwitchStateResponse *message,
					     ProtobufCBuffer *buffer);
SwitchStateResponse *switch_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void switch_state_response__free_unpacked(SwitchStateResponse *message,
					  ProtobufCAllocator *allocator);
/* SwitchCommandRequest methods */
void switch_command_request__init(SwitchCommandRequest *message);
size_t switch_command_request__get_packed_size(const SwitchCommandRequest *message);
size_t switch_command_request__pack(const SwitchCommandRequest *message, uint8_t *out);
size_t switch_command_request__pack_to_buffer(const SwitchCommandRequest *message,
					      ProtobufCBuffer *buffer);
SwitchCommandRequest *switch_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						     const uint8_t *data);
void switch_command_request__free_unpacked(SwitchCommandRequest *message,
					   ProtobufCAllocator *allocator);
/* ListEntitiesTextSensorResponse methods */
void list_entities_text_sensor_response__init(ListEntitiesTextSensorResponse *message);
size_t
list_entities_text_sensor_response__get_packed_size(const ListEntitiesTextSensorResponse *message);
size_t list_entities_text_sensor_response__pack(const ListEntitiesTextSensorResponse *message,
						uint8_t *out);
size_t
list_entities_text_sensor_response__pack_to_buffer(const ListEntitiesTextSensorResponse *message,
						   ProtobufCBuffer *buffer);
ListEntitiesTextSensorResponse *
list_entities_text_sensor_response__unpack(ProtobufCAllocator *allocator, size_t len,
					   const uint8_t *data);
void list_entities_text_sensor_response__free_unpacked(ListEntitiesTextSensorResponse *message,
						       ProtobufCAllocator *allocator);
/* TextSensorStateResponse methods */
void text_sensor_state_response__init(TextSensorStateResponse *message);
size_t text_sensor_state_response__get_packed_size(const TextSensorStateResponse *message);
size_t text_sensor_state_response__pack(const TextSensorStateResponse *message, uint8_t *out);
size_t text_sensor_state_response__pack_to_buffer(const TextSensorStateResponse *message,
						  ProtobufCBuffer *buffer);
TextSensorStateResponse *text_sensor_state_response__unpack(ProtobufCAllocator *allocator,
							    size_t len, const uint8_t *data);
void text_sensor_state_response__free_unpacked(TextSensorStateResponse *message,
					       ProtobufCAllocator *allocator);
/* SubscribeLogsRequest methods */
void subscribe_logs_request__init(SubscribeLogsRequest *message);
size_t subscribe_logs_request__get_packed_size(const SubscribeLogsRequest *message);
size_t subscribe_logs_request__pack(const SubscribeLogsRequest *message, uint8_t *out);
size_t subscribe_logs_request__pack_to_buffer(const SubscribeLogsRequest *message,
					      ProtobufCBuffer *buffer);
SubscribeLogsRequest *subscribe_logs_request__unpack(ProtobufCAllocator *allocator, size_t len,
						     const uint8_t *data);
void subscribe_logs_request__free_unpacked(SubscribeLogsRequest *message,
					   ProtobufCAllocator *allocator);
/* SubscribeLogsResponse methods */
void subscribe_logs_response__init(SubscribeLogsResponse *message);
size_t subscribe_logs_response__get_packed_size(const SubscribeLogsResponse *message);
size_t subscribe_logs_response__pack(const SubscribeLogsResponse *message, uint8_t *out);
size_t subscribe_logs_response__pack_to_buffer(const SubscribeLogsResponse *message,
					       ProtobufCBuffer *buffer);
SubscribeLogsResponse *subscribe_logs_response__unpack(ProtobufCAllocator *allocator, size_t len,
						       const uint8_t *data);
void subscribe_logs_response__free_unpacked(SubscribeLogsResponse *message,
					    ProtobufCAllocator *allocator);
/* SubscribeHomeassistantServicesRequest methods */
void subscribe_homeassistant_services_request__init(SubscribeHomeassistantServicesRequest *message);
size_t subscribe_homeassistant_services_request__get_packed_size(
	const SubscribeHomeassistantServicesRequest *message);
size_t
subscribe_homeassistant_services_request__pack(const SubscribeHomeassistantServicesRequest *message,
					       uint8_t *out);
size_t subscribe_homeassistant_services_request__pack_to_buffer(
	const SubscribeHomeassistantServicesRequest *message, ProtobufCBuffer *buffer);
SubscribeHomeassistantServicesRequest *
subscribe_homeassistant_services_request__unpack(ProtobufCAllocator *allocator, size_t len,
						 const uint8_t *data);
void subscribe_homeassistant_services_request__free_unpacked(
	SubscribeHomeassistantServicesRequest *message, ProtobufCAllocator *allocator);
/* HomeassistantServiceMap methods */
void homeassistant_service_map__init(HomeassistantServiceMap *message);
size_t homeassistant_service_map__get_packed_size(const HomeassistantServiceMap *message);
size_t homeassistant_service_map__pack(const HomeassistantServiceMap *message, uint8_t *out);
size_t homeassistant_service_map__pack_to_buffer(const HomeassistantServiceMap *message,
						 ProtobufCBuffer *buffer);
HomeassistantServiceMap *homeassistant_service_map__unpack(ProtobufCAllocator *allocator,
							   size_t len, const uint8_t *data);
void homeassistant_service_map__free_unpacked(HomeassistantServiceMap *message,
					      ProtobufCAllocator *allocator);
/* HomeassistantServiceResponse methods */
void homeassistant_service_response__init(HomeassistantServiceResponse *message);
size_t homeassistant_service_response__get_packed_size(const HomeassistantServiceResponse *message);
size_t homeassistant_service_response__pack(const HomeassistantServiceResponse *message,
					    uint8_t *out);
size_t homeassistant_service_response__pack_to_buffer(const HomeassistantServiceResponse *message,
						      ProtobufCBuffer *buffer);
HomeassistantServiceResponse *homeassistant_service_response__unpack(ProtobufCAllocator *allocator,
								     size_t len,
								     const uint8_t *data);
void homeassistant_service_response__free_unpacked(HomeassistantServiceResponse *message,
						   ProtobufCAllocator *allocator);
/* SubscribeHomeAssistantStatesRequest methods */
void subscribe_home_assistant_states_request__init(SubscribeHomeAssistantStatesRequest *message);
size_t subscribe_home_assistant_states_request__get_packed_size(
	const SubscribeHomeAssistantStatesRequest *message);
size_t
subscribe_home_assistant_states_request__pack(const SubscribeHomeAssistantStatesRequest *message,
					      uint8_t *out);
size_t subscribe_home_assistant_states_request__pack_to_buffer(
	const SubscribeHomeAssistantStatesRequest *message, ProtobufCBuffer *buffer);
SubscribeHomeAssistantStatesRequest *
subscribe_home_assistant_states_request__unpack(ProtobufCAllocator *allocator, size_t len,
						const uint8_t *data);
void subscribe_home_assistant_states_request__free_unpacked(
	SubscribeHomeAssistantStatesRequest *message, ProtobufCAllocator *allocator);
/* SubscribeHomeAssistantStateResponse methods */
void subscribe_home_assistant_state_response__init(SubscribeHomeAssistantStateResponse *message);
size_t subscribe_home_assistant_state_response__get_packed_size(
	const SubscribeHomeAssistantStateResponse *message);
size_t
subscribe_home_assistant_state_response__pack(const SubscribeHomeAssistantStateResponse *message,
					      uint8_t *out);
size_t subscribe_home_assistant_state_response__pack_to_buffer(
	const SubscribeHomeAssistantStateResponse *message, ProtobufCBuffer *buffer);
SubscribeHomeAssistantStateResponse *
subscribe_home_assistant_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
						const uint8_t *data);
void subscribe_home_assistant_state_response__free_unpacked(
	SubscribeHomeAssistantStateResponse *message, ProtobufCAllocator *allocator);
/* HomeAssistantStateResponse methods */
void home_assistant_state_response__init(HomeAssistantStateResponse *message);
size_t home_assistant_state_response__get_packed_size(const HomeAssistantStateResponse *message);
size_t home_assistant_state_response__pack(const HomeAssistantStateResponse *message, uint8_t *out);
size_t home_assistant_state_response__pack_to_buffer(const HomeAssistantStateResponse *message,
						     ProtobufCBuffer *buffer);
HomeAssistantStateResponse *home_assistant_state_response__unpack(ProtobufCAllocator *allocator,
								  size_t len, const uint8_t *data);
void home_assistant_state_response__free_unpacked(HomeAssistantStateResponse *message,
						  ProtobufCAllocator *allocator);
/* GetTimeRequest methods */
void get_time_request__init(GetTimeRequest *message);
size_t get_time_request__get_packed_size(const GetTimeRequest *message);
size_t get_time_request__pack(const GetTimeRequest *message, uint8_t *out);
size_t get_time_request__pack_to_buffer(const GetTimeRequest *message, ProtobufCBuffer *buffer);
GetTimeRequest *get_time_request__unpack(ProtobufCAllocator *allocator, size_t len,
					 const uint8_t *data);
void get_time_request__free_unpacked(GetTimeRequest *message, ProtobufCAllocator *allocator);
/* GetTimeResponse methods */
void get_time_response__init(GetTimeResponse *message);
size_t get_time_response__get_packed_size(const GetTimeResponse *message);
size_t get_time_response__pack(const GetTimeResponse *message, uint8_t *out);
size_t get_time_response__pack_to_buffer(const GetTimeResponse *message, ProtobufCBuffer *buffer);
GetTimeResponse *get_time_response__unpack(ProtobufCAllocator *allocator, size_t len,
					   const uint8_t *data);
void get_time_response__free_unpacked(GetTimeResponse *message, ProtobufCAllocator *allocator);
/* ListEntitiesServicesArgument methods */
void list_entities_services_argument__init(ListEntitiesServicesArgument *message);
size_t
list_entities_services_argument__get_packed_size(const ListEntitiesServicesArgument *message);
size_t list_entities_services_argument__pack(const ListEntitiesServicesArgument *message,
					     uint8_t *out);
size_t list_entities_services_argument__pack_to_buffer(const ListEntitiesServicesArgument *message,
						       ProtobufCBuffer *buffer);
ListEntitiesServicesArgument *list_entities_services_argument__unpack(ProtobufCAllocator *allocator,
								      size_t len,
								      const uint8_t *data);
void list_entities_services_argument__free_unpacked(ListEntitiesServicesArgument *message,
						    ProtobufCAllocator *allocator);
/* ListEntitiesServicesResponse methods */
void list_entities_services_response__init(ListEntitiesServicesResponse *message);
size_t
list_entities_services_response__get_packed_size(const ListEntitiesServicesResponse *message);
size_t list_entities_services_response__pack(const ListEntitiesServicesResponse *message,
					     uint8_t *out);
size_t list_entities_services_response__pack_to_buffer(const ListEntitiesServicesResponse *message,
						       ProtobufCBuffer *buffer);
ListEntitiesServicesResponse *list_entities_services_response__unpack(ProtobufCAllocator *allocator,
								      size_t len,
								      const uint8_t *data);
void list_entities_services_response__free_unpacked(ListEntitiesServicesResponse *message,
						    ProtobufCAllocator *allocator);
/* ExecuteServiceArgument methods */
void execute_service_argument__init(ExecuteServiceArgument *message);
size_t execute_service_argument__get_packed_size(const ExecuteServiceArgument *message);
size_t execute_service_argument__pack(const ExecuteServiceArgument *message, uint8_t *out);
size_t execute_service_argument__pack_to_buffer(const ExecuteServiceArgument *message,
						ProtobufCBuffer *buffer);
ExecuteServiceArgument *execute_service_argument__unpack(ProtobufCAllocator *allocator, size_t len,
							 const uint8_t *data);
void execute_service_argument__free_unpacked(ExecuteServiceArgument *message,
					     ProtobufCAllocator *allocator);
/* ExecuteServiceRequest methods */
void execute_service_request__init(ExecuteServiceRequest *message);
size_t execute_service_request__get_packed_size(const ExecuteServiceRequest *message);
size_t execute_service_request__pack(const ExecuteServiceRequest *message, uint8_t *out);
size_t execute_service_request__pack_to_buffer(const ExecuteServiceRequest *message,
					       ProtobufCBuffer *buffer);
ExecuteServiceRequest *execute_service_request__unpack(ProtobufCAllocator *allocator, size_t len,
						       const uint8_t *data);
void execute_service_request__free_unpacked(ExecuteServiceRequest *message,
					    ProtobufCAllocator *allocator);
/* ListEntitiesCameraResponse methods */
void list_entities_camera_response__init(ListEntitiesCameraResponse *message);
size_t list_entities_camera_response__get_packed_size(const ListEntitiesCameraResponse *message);
size_t list_entities_camera_response__pack(const ListEntitiesCameraResponse *message, uint8_t *out);
size_t list_entities_camera_response__pack_to_buffer(const ListEntitiesCameraResponse *message,
						     ProtobufCBuffer *buffer);
ListEntitiesCameraResponse *list_entities_camera_response__unpack(ProtobufCAllocator *allocator,
								  size_t len, const uint8_t *data);
void list_entities_camera_response__free_unpacked(ListEntitiesCameraResponse *message,
						  ProtobufCAllocator *allocator);
/* CameraImageResponse methods */
void camera_image_response__init(CameraImageResponse *message);
size_t camera_image_response__get_packed_size(const CameraImageResponse *message);
size_t camera_image_response__pack(const CameraImageResponse *message, uint8_t *out);
size_t camera_image_response__pack_to_buffer(const CameraImageResponse *message,
					     ProtobufCBuffer *buffer);
CameraImageResponse *camera_image_response__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void camera_image_response__free_unpacked(CameraImageResponse *message,
					  ProtobufCAllocator *allocator);
/* CameraImageRequest methods */
void camera_image_request__init(CameraImageRequest *message);
size_t camera_image_request__get_packed_size(const CameraImageRequest *message);
size_t camera_image_request__pack(const CameraImageRequest *message, uint8_t *out);
size_t camera_image_request__pack_to_buffer(const CameraImageRequest *message,
					    ProtobufCBuffer *buffer);
CameraImageRequest *camera_image_request__unpack(ProtobufCAllocator *allocator, size_t len,
						 const uint8_t *data);
void camera_image_request__free_unpacked(CameraImageRequest *message,
					 ProtobufCAllocator *allocator);
/* ListEntitiesClimateResponse methods */
void list_entities_climate_response__init(ListEntitiesClimateResponse *message);
size_t list_entities_climate_response__get_packed_size(const ListEntitiesClimateResponse *message);
size_t list_entities_climate_response__pack(const ListEntitiesClimateResponse *message,
					    uint8_t *out);
size_t list_entities_climate_response__pack_to_buffer(const ListEntitiesClimateResponse *message,
						      ProtobufCBuffer *buffer);
ListEntitiesClimateResponse *list_entities_climate_response__unpack(ProtobufCAllocator *allocator,
								    size_t len,
								    const uint8_t *data);
void list_entities_climate_response__free_unpacked(ListEntitiesClimateResponse *message,
						   ProtobufCAllocator *allocator);
/* ClimateStateResponse methods */
void climate_state_response__init(ClimateStateResponse *message);
size_t climate_state_response__get_packed_size(const ClimateStateResponse *message);
size_t climate_state_response__pack(const ClimateStateResponse *message, uint8_t *out);
size_t climate_state_response__pack_to_buffer(const ClimateStateResponse *message,
					      ProtobufCBuffer *buffer);
ClimateStateResponse *climate_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
						     const uint8_t *data);
void climate_state_response__free_unpacked(ClimateStateResponse *message,
					   ProtobufCAllocator *allocator);
/* ClimateCommandRequest methods */
void climate_command_request__init(ClimateCommandRequest *message);
size_t climate_command_request__get_packed_size(const ClimateCommandRequest *message);
size_t climate_command_request__pack(const ClimateCommandRequest *message, uint8_t *out);
size_t climate_command_request__pack_to_buffer(const ClimateCommandRequest *message,
					       ProtobufCBuffer *buffer);
ClimateCommandRequest *climate_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						       const uint8_t *data);
void climate_command_request__free_unpacked(ClimateCommandRequest *message,
					    ProtobufCAllocator *allocator);
/* ListEntitiesNumberResponse methods */
void list_entities_number_response__init(ListEntitiesNumberResponse *message);
size_t list_entities_number_response__get_packed_size(const ListEntitiesNumberResponse *message);
size_t list_entities_number_response__pack(const ListEntitiesNumberResponse *message, uint8_t *out);
size_t list_entities_number_response__pack_to_buffer(const ListEntitiesNumberResponse *message,
						     ProtobufCBuffer *buffer);
ListEntitiesNumberResponse *list_entities_number_response__unpack(ProtobufCAllocator *allocator,
								  size_t len, const uint8_t *data);
void list_entities_number_response__free_unpacked(ListEntitiesNumberResponse *message,
						  ProtobufCAllocator *allocator);
/* NumberStateResponse methods */
void number_state_response__init(NumberStateResponse *message);
size_t number_state_response__get_packed_size(const NumberStateResponse *message);
size_t number_state_response__pack(const NumberStateResponse *message, uint8_t *out);
size_t number_state_response__pack_to_buffer(const NumberStateResponse *message,
					     ProtobufCBuffer *buffer);
NumberStateResponse *number_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void number_state_response__free_unpacked(NumberStateResponse *message,
					  ProtobufCAllocator *allocator);
/* NumberCommandRequest methods */
void number_command_request__init(NumberCommandRequest *message);
size_t number_command_request__get_packed_size(const NumberCommandRequest *message);
size_t number_command_request__pack(const NumberCommandRequest *message, uint8_t *out);
size_t number_command_request__pack_to_buffer(const NumberCommandRequest *message,
					      ProtobufCBuffer *buffer);
NumberCommandRequest *number_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						     const uint8_t *data);
void number_command_request__free_unpacked(NumberCommandRequest *message,
					   ProtobufCAllocator *allocator);
/* ListEntitiesSelectResponse methods */
void list_entities_select_response__init(ListEntitiesSelectResponse *message);
size_t list_entities_select_response__get_packed_size(const ListEntitiesSelectResponse *message);
size_t list_entities_select_response__pack(const ListEntitiesSelectResponse *message, uint8_t *out);
size_t list_entities_select_response__pack_to_buffer(const ListEntitiesSelectResponse *message,
						     ProtobufCBuffer *buffer);
ListEntitiesSelectResponse *list_entities_select_response__unpack(ProtobufCAllocator *allocator,
								  size_t len, const uint8_t *data);
void list_entities_select_response__free_unpacked(ListEntitiesSelectResponse *message,
						  ProtobufCAllocator *allocator);
/* SelectStateResponse methods */
void select_state_response__init(SelectStateResponse *message);
size_t select_state_response__get_packed_size(const SelectStateResponse *message);
size_t select_state_response__pack(const SelectStateResponse *message, uint8_t *out);
size_t select_state_response__pack_to_buffer(const SelectStateResponse *message,
					     ProtobufCBuffer *buffer);
SelectStateResponse *select_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void select_state_response__free_unpacked(SelectStateResponse *message,
					  ProtobufCAllocator *allocator);
/* SelectCommandRequest methods */
void select_command_request__init(SelectCommandRequest *message);
size_t select_command_request__get_packed_size(const SelectCommandRequest *message);
size_t select_command_request__pack(const SelectCommandRequest *message, uint8_t *out);
size_t select_command_request__pack_to_buffer(const SelectCommandRequest *message,
					      ProtobufCBuffer *buffer);
SelectCommandRequest *select_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						     const uint8_t *data);
void select_command_request__free_unpacked(SelectCommandRequest *message,
					   ProtobufCAllocator *allocator);
/* ListEntitiesLockResponse methods */
void list_entities_lock_response__init(ListEntitiesLockResponse *message);
size_t list_entities_lock_response__get_packed_size(const ListEntitiesLockResponse *message);
size_t list_entities_lock_response__pack(const ListEntitiesLockResponse *message, uint8_t *out);
size_t list_entities_lock_response__pack_to_buffer(const ListEntitiesLockResponse *message,
						   ProtobufCBuffer *buffer);
ListEntitiesLockResponse *list_entities_lock_response__unpack(ProtobufCAllocator *allocator,
							      size_t len, const uint8_t *data);
void list_entities_lock_response__free_unpacked(ListEntitiesLockResponse *message,
						ProtobufCAllocator *allocator);
/* LockStateResponse methods */
void lock_state_response__init(LockStateResponse *message);
size_t lock_state_response__get_packed_size(const LockStateResponse *message);
size_t lock_state_response__pack(const LockStateResponse *message, uint8_t *out);
size_t lock_state_response__pack_to_buffer(const LockStateResponse *message,
					   ProtobufCBuffer *buffer);
LockStateResponse *lock_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
					       const uint8_t *data);
void lock_state_response__free_unpacked(LockStateResponse *message, ProtobufCAllocator *allocator);
/* LockCommandRequest methods */
void lock_command_request__init(LockCommandRequest *message);
size_t lock_command_request__get_packed_size(const LockCommandRequest *message);
size_t lock_command_request__pack(const LockCommandRequest *message, uint8_t *out);
size_t lock_command_request__pack_to_buffer(const LockCommandRequest *message,
					    ProtobufCBuffer *buffer);
LockCommandRequest *lock_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						 const uint8_t *data);
void lock_command_request__free_unpacked(LockCommandRequest *message,
					 ProtobufCAllocator *allocator);
/* ListEntitiesButtonResponse methods */
void list_entities_button_response__init(ListEntitiesButtonResponse *message);
size_t list_entities_button_response__get_packed_size(const ListEntitiesButtonResponse *message);
size_t list_entities_button_response__pack(const ListEntitiesButtonResponse *message, uint8_t *out);
size_t list_entities_button_response__pack_to_buffer(const ListEntitiesButtonResponse *message,
						     ProtobufCBuffer *buffer);
ListEntitiesButtonResponse *list_entities_button_response__unpack(ProtobufCAllocator *allocator,
								  size_t len, const uint8_t *data);
void list_entities_button_response__free_unpacked(ListEntitiesButtonResponse *message,
						  ProtobufCAllocator *allocator);
/* ButtonCommandRequest methods */
void button_command_request__init(ButtonCommandRequest *message);
size_t button_command_request__get_packed_size(const ButtonCommandRequest *message);
size_t button_command_request__pack(const ButtonCommandRequest *message, uint8_t *out);
size_t button_command_request__pack_to_buffer(const ButtonCommandRequest *message,
					      ProtobufCBuffer *buffer);
ButtonCommandRequest *button_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						     const uint8_t *data);
void button_command_request__free_unpacked(ButtonCommandRequest *message,
					   ProtobufCAllocator *allocator);
/* MediaPlayerSupportedFormat methods */
void media_player_supported_format__init(MediaPlayerSupportedFormat *message);
size_t media_player_supported_format__get_packed_size(const MediaPlayerSupportedFormat *message);
size_t media_player_supported_format__pack(const MediaPlayerSupportedFormat *message, uint8_t *out);
size_t media_player_supported_format__pack_to_buffer(const MediaPlayerSupportedFormat *message,
						     ProtobufCBuffer *buffer);
MediaPlayerSupportedFormat *media_player_supported_format__unpack(ProtobufCAllocator *allocator,
								  size_t len, const uint8_t *data);
void media_player_supported_format__free_unpacked(MediaPlayerSupportedFormat *message,
						  ProtobufCAllocator *allocator);
/* ListEntitiesMediaPlayerResponse methods */
void list_entities_media_player_response__init(ListEntitiesMediaPlayerResponse *message);
size_t list_entities_media_player_response__get_packed_size(
	const ListEntitiesMediaPlayerResponse *message);
size_t list_entities_media_player_response__pack(const ListEntitiesMediaPlayerResponse *message,
						 uint8_t *out);
size_t
list_entities_media_player_response__pack_to_buffer(const ListEntitiesMediaPlayerResponse *message,
						    ProtobufCBuffer *buffer);
ListEntitiesMediaPlayerResponse *
list_entities_media_player_response__unpack(ProtobufCAllocator *allocator, size_t len,
					    const uint8_t *data);
void list_entities_media_player_response__free_unpacked(ListEntitiesMediaPlayerResponse *message,
							ProtobufCAllocator *allocator);
/* MediaPlayerStateResponse methods */
void media_player_state_response__init(MediaPlayerStateResponse *message);
size_t media_player_state_response__get_packed_size(const MediaPlayerStateResponse *message);
size_t media_player_state_response__pack(const MediaPlayerStateResponse *message, uint8_t *out);
size_t media_player_state_response__pack_to_buffer(const MediaPlayerStateResponse *message,
						   ProtobufCBuffer *buffer);
MediaPlayerStateResponse *media_player_state_response__unpack(ProtobufCAllocator *allocator,
							      size_t len, const uint8_t *data);
void media_player_state_response__free_unpacked(MediaPlayerStateResponse *message,
						ProtobufCAllocator *allocator);
/* MediaPlayerCommandRequest methods */
void media_player_command_request__init(MediaPlayerCommandRequest *message);
size_t media_player_command_request__get_packed_size(const MediaPlayerCommandRequest *message);
size_t media_player_command_request__pack(const MediaPlayerCommandRequest *message, uint8_t *out);
size_t media_player_command_request__pack_to_buffer(const MediaPlayerCommandRequest *message,
						    ProtobufCBuffer *buffer);
MediaPlayerCommandRequest *media_player_command_request__unpack(ProtobufCAllocator *allocator,
								size_t len, const uint8_t *data);
void media_player_command_request__free_unpacked(MediaPlayerCommandRequest *message,
						 ProtobufCAllocator *allocator);
/* SubscribeBluetoothLEAdvertisementsRequest methods */
void subscribe_bluetooth_leadvertisements_request__init(
	SubscribeBluetoothLEAdvertisementsRequest *message);
size_t subscribe_bluetooth_leadvertisements_request__get_packed_size(
	const SubscribeBluetoothLEAdvertisementsRequest *message);
size_t subscribe_bluetooth_leadvertisements_request__pack(
	const SubscribeBluetoothLEAdvertisementsRequest *message, uint8_t *out);
size_t subscribe_bluetooth_leadvertisements_request__pack_to_buffer(
	const SubscribeBluetoothLEAdvertisementsRequest *message, ProtobufCBuffer *buffer);
SubscribeBluetoothLEAdvertisementsRequest *
subscribe_bluetooth_leadvertisements_request__unpack(ProtobufCAllocator *allocator, size_t len,
						     const uint8_t *data);
void subscribe_bluetooth_leadvertisements_request__free_unpacked(
	SubscribeBluetoothLEAdvertisementsRequest *message, ProtobufCAllocator *allocator);
/* BluetoothServiceData methods */
void bluetooth_service_data__init(BluetoothServiceData *message);
size_t bluetooth_service_data__get_packed_size(const BluetoothServiceData *message);
size_t bluetooth_service_data__pack(const BluetoothServiceData *message, uint8_t *out);
size_t bluetooth_service_data__pack_to_buffer(const BluetoothServiceData *message,
					      ProtobufCBuffer *buffer);
BluetoothServiceData *bluetooth_service_data__unpack(ProtobufCAllocator *allocator, size_t len,
						     const uint8_t *data);
void bluetooth_service_data__free_unpacked(BluetoothServiceData *message,
					   ProtobufCAllocator *allocator);
/* BluetoothLEAdvertisementResponse methods */
void bluetooth_leadvertisement_response__init(BluetoothLEAdvertisementResponse *message);
size_t bluetooth_leadvertisement_response__get_packed_size(
	const BluetoothLEAdvertisementResponse *message);
size_t bluetooth_leadvertisement_response__pack(const BluetoothLEAdvertisementResponse *message,
						uint8_t *out);
size_t
bluetooth_leadvertisement_response__pack_to_buffer(const BluetoothLEAdvertisementResponse *message,
						   ProtobufCBuffer *buffer);
BluetoothLEAdvertisementResponse *
bluetooth_leadvertisement_response__unpack(ProtobufCAllocator *allocator, size_t len,
					   const uint8_t *data);
void bluetooth_leadvertisement_response__free_unpacked(BluetoothLEAdvertisementResponse *message,
						       ProtobufCAllocator *allocator);
/* BluetoothLERawAdvertisement methods */
void bluetooth_leraw_advertisement__init(BluetoothLERawAdvertisement *message);
size_t bluetooth_leraw_advertisement__get_packed_size(const BluetoothLERawAdvertisement *message);
size_t bluetooth_leraw_advertisement__pack(const BluetoothLERawAdvertisement *message,
					   uint8_t *out);
size_t bluetooth_leraw_advertisement__pack_to_buffer(const BluetoothLERawAdvertisement *message,
						     ProtobufCBuffer *buffer);
BluetoothLERawAdvertisement *bluetooth_leraw_advertisement__unpack(ProtobufCAllocator *allocator,
								   size_t len, const uint8_t *data);
void bluetooth_leraw_advertisement__free_unpacked(BluetoothLERawAdvertisement *message,
						  ProtobufCAllocator *allocator);
/* BluetoothLERawAdvertisementsResponse methods */
void bluetooth_leraw_advertisements_response__init(BluetoothLERawAdvertisementsResponse *message);
size_t bluetooth_leraw_advertisements_response__get_packed_size(
	const BluetoothLERawAdvertisementsResponse *message);
size_t
bluetooth_leraw_advertisements_response__pack(const BluetoothLERawAdvertisementsResponse *message,
					      uint8_t *out);
size_t bluetooth_leraw_advertisements_response__pack_to_buffer(
	const BluetoothLERawAdvertisementsResponse *message, ProtobufCBuffer *buffer);
BluetoothLERawAdvertisementsResponse *
bluetooth_leraw_advertisements_response__unpack(ProtobufCAllocator *allocator, size_t len,
						const uint8_t *data);
void bluetooth_leraw_advertisements_response__free_unpacked(
	BluetoothLERawAdvertisementsResponse *message, ProtobufCAllocator *allocator);
/* BluetoothDeviceRequest methods */
void bluetooth_device_request__init(BluetoothDeviceRequest *message);
size_t bluetooth_device_request__get_packed_size(const BluetoothDeviceRequest *message);
size_t bluetooth_device_request__pack(const BluetoothDeviceRequest *message, uint8_t *out);
size_t bluetooth_device_request__pack_to_buffer(const BluetoothDeviceRequest *message,
						ProtobufCBuffer *buffer);
BluetoothDeviceRequest *bluetooth_device_request__unpack(ProtobufCAllocator *allocator, size_t len,
							 const uint8_t *data);
void bluetooth_device_request__free_unpacked(BluetoothDeviceRequest *message,
					     ProtobufCAllocator *allocator);
/* BluetoothDeviceConnectionResponse methods */
void bluetooth_device_connection_response__init(BluetoothDeviceConnectionResponse *message);
size_t bluetooth_device_connection_response__get_packed_size(
	const BluetoothDeviceConnectionResponse *message);
size_t bluetooth_device_connection_response__pack(const BluetoothDeviceConnectionResponse *message,
						  uint8_t *out);
size_t bluetooth_device_connection_response__pack_to_buffer(
	const BluetoothDeviceConnectionResponse *message, ProtobufCBuffer *buffer);
BluetoothDeviceConnectionResponse *
bluetooth_device_connection_response__unpack(ProtobufCAllocator *allocator, size_t len,
					     const uint8_t *data);
void bluetooth_device_connection_response__free_unpacked(BluetoothDeviceConnectionResponse *message,
							 ProtobufCAllocator *allocator);
/* BluetoothGATTGetServicesRequest methods */
void bluetooth_gattget_services_request__init(BluetoothGATTGetServicesRequest *message);
size_t
bluetooth_gattget_services_request__get_packed_size(const BluetoothGATTGetServicesRequest *message);
size_t bluetooth_gattget_services_request__pack(const BluetoothGATTGetServicesRequest *message,
						uint8_t *out);
size_t
bluetooth_gattget_services_request__pack_to_buffer(const BluetoothGATTGetServicesRequest *message,
						   ProtobufCBuffer *buffer);
BluetoothGATTGetServicesRequest *
bluetooth_gattget_services_request__unpack(ProtobufCAllocator *allocator, size_t len,
					   const uint8_t *data);
void bluetooth_gattget_services_request__free_unpacked(BluetoothGATTGetServicesRequest *message,
						       ProtobufCAllocator *allocator);
/* BluetoothGATTDescriptor methods */
void bluetooth_gattdescriptor__init(BluetoothGATTDescriptor *message);
size_t bluetooth_gattdescriptor__get_packed_size(const BluetoothGATTDescriptor *message);
size_t bluetooth_gattdescriptor__pack(const BluetoothGATTDescriptor *message, uint8_t *out);
size_t bluetooth_gattdescriptor__pack_to_buffer(const BluetoothGATTDescriptor *message,
						ProtobufCBuffer *buffer);
BluetoothGATTDescriptor *bluetooth_gattdescriptor__unpack(ProtobufCAllocator *allocator, size_t len,
							  const uint8_t *data);
void bluetooth_gattdescriptor__free_unpacked(BluetoothGATTDescriptor *message,
					     ProtobufCAllocator *allocator);
/* BluetoothGATTCharacteristic methods */
void bluetooth_gattcharacteristic__init(BluetoothGATTCharacteristic *message);
size_t bluetooth_gattcharacteristic__get_packed_size(const BluetoothGATTCharacteristic *message);
size_t bluetooth_gattcharacteristic__pack(const BluetoothGATTCharacteristic *message, uint8_t *out);
size_t bluetooth_gattcharacteristic__pack_to_buffer(const BluetoothGATTCharacteristic *message,
						    ProtobufCBuffer *buffer);
BluetoothGATTCharacteristic *bluetooth_gattcharacteristic__unpack(ProtobufCAllocator *allocator,
								  size_t len, const uint8_t *data);
void bluetooth_gattcharacteristic__free_unpacked(BluetoothGATTCharacteristic *message,
						 ProtobufCAllocator *allocator);
/* BluetoothGATTService methods */
void bluetooth_gattservice__init(BluetoothGATTService *message);
size_t bluetooth_gattservice__get_packed_size(const BluetoothGATTService *message);
size_t bluetooth_gattservice__pack(const BluetoothGATTService *message, uint8_t *out);
size_t bluetooth_gattservice__pack_to_buffer(const BluetoothGATTService *message,
					     ProtobufCBuffer *buffer);
BluetoothGATTService *bluetooth_gattservice__unpack(ProtobufCAllocator *allocator, size_t len,
						    const uint8_t *data);
void bluetooth_gattservice__free_unpacked(BluetoothGATTService *message,
					  ProtobufCAllocator *allocator);
/* BluetoothGATTGetServicesResponse methods */
void bluetooth_gattget_services_response__init(BluetoothGATTGetServicesResponse *message);
size_t bluetooth_gattget_services_response__get_packed_size(
	const BluetoothGATTGetServicesResponse *message);
size_t bluetooth_gattget_services_response__pack(const BluetoothGATTGetServicesResponse *message,
						 uint8_t *out);
size_t
bluetooth_gattget_services_response__pack_to_buffer(const BluetoothGATTGetServicesResponse *message,
						    ProtobufCBuffer *buffer);
BluetoothGATTGetServicesResponse *
bluetooth_gattget_services_response__unpack(ProtobufCAllocator *allocator, size_t len,
					    const uint8_t *data);
void bluetooth_gattget_services_response__free_unpacked(BluetoothGATTGetServicesResponse *message,
							ProtobufCAllocator *allocator);
/* BluetoothGATTGetServicesDoneResponse methods */
void bluetooth_gattget_services_done_response__init(BluetoothGATTGetServicesDoneResponse *message);
size_t bluetooth_gattget_services_done_response__get_packed_size(
	const BluetoothGATTGetServicesDoneResponse *message);
size_t
bluetooth_gattget_services_done_response__pack(const BluetoothGATTGetServicesDoneResponse *message,
					       uint8_t *out);
size_t bluetooth_gattget_services_done_response__pack_to_buffer(
	const BluetoothGATTGetServicesDoneResponse *message, ProtobufCBuffer *buffer);
BluetoothGATTGetServicesDoneResponse *
bluetooth_gattget_services_done_response__unpack(ProtobufCAllocator *allocator, size_t len,
						 const uint8_t *data);
void bluetooth_gattget_services_done_response__free_unpacked(
	BluetoothGATTGetServicesDoneResponse *message, ProtobufCAllocator *allocator);
/* BluetoothGATTReadRequest methods */
void bluetooth_gattread_request__init(BluetoothGATTReadRequest *message);
size_t bluetooth_gattread_request__get_packed_size(const BluetoothGATTReadRequest *message);
size_t bluetooth_gattread_request__pack(const BluetoothGATTReadRequest *message, uint8_t *out);
size_t bluetooth_gattread_request__pack_to_buffer(const BluetoothGATTReadRequest *message,
						  ProtobufCBuffer *buffer);
BluetoothGATTReadRequest *bluetooth_gattread_request__unpack(ProtobufCAllocator *allocator,
							     size_t len, const uint8_t *data);
void bluetooth_gattread_request__free_unpacked(BluetoothGATTReadRequest *message,
					       ProtobufCAllocator *allocator);
/* BluetoothGATTReadResponse methods */
void bluetooth_gattread_response__init(BluetoothGATTReadResponse *message);
size_t bluetooth_gattread_response__get_packed_size(const BluetoothGATTReadResponse *message);
size_t bluetooth_gattread_response__pack(const BluetoothGATTReadResponse *message, uint8_t *out);
size_t bluetooth_gattread_response__pack_to_buffer(const BluetoothGATTReadResponse *message,
						   ProtobufCBuffer *buffer);
BluetoothGATTReadResponse *bluetooth_gattread_response__unpack(ProtobufCAllocator *allocator,
							       size_t len, const uint8_t *data);
void bluetooth_gattread_response__free_unpacked(BluetoothGATTReadResponse *message,
						ProtobufCAllocator *allocator);
/* BluetoothGATTWriteRequest methods */
void bluetooth_gattwrite_request__init(BluetoothGATTWriteRequest *message);
size_t bluetooth_gattwrite_request__get_packed_size(const BluetoothGATTWriteRequest *message);
size_t bluetooth_gattwrite_request__pack(const BluetoothGATTWriteRequest *message, uint8_t *out);
size_t bluetooth_gattwrite_request__pack_to_buffer(const BluetoothGATTWriteRequest *message,
						   ProtobufCBuffer *buffer);
BluetoothGATTWriteRequest *bluetooth_gattwrite_request__unpack(ProtobufCAllocator *allocator,
							       size_t len, const uint8_t *data);
void bluetooth_gattwrite_request__free_unpacked(BluetoothGATTWriteRequest *message,
						ProtobufCAllocator *allocator);
/* BluetoothGATTReadDescriptorRequest methods */
void bluetooth_gattread_descriptor_request__init(BluetoothGATTReadDescriptorRequest *message);
size_t bluetooth_gattread_descriptor_request__get_packed_size(
	const BluetoothGATTReadDescriptorRequest *message);
size_t
bluetooth_gattread_descriptor_request__pack(const BluetoothGATTReadDescriptorRequest *message,
					    uint8_t *out);
size_t bluetooth_gattread_descriptor_request__pack_to_buffer(
	const BluetoothGATTReadDescriptorRequest *message, ProtobufCBuffer *buffer);
BluetoothGATTReadDescriptorRequest *
bluetooth_gattread_descriptor_request__unpack(ProtobufCAllocator *allocator, size_t len,
					      const uint8_t *data);
void bluetooth_gattread_descriptor_request__free_unpacked(
	BluetoothGATTReadDescriptorRequest *message, ProtobufCAllocator *allocator);
/* BluetoothGATTWriteDescriptorRequest methods */
void bluetooth_gattwrite_descriptor_request__init(BluetoothGATTWriteDescriptorRequest *message);
size_t bluetooth_gattwrite_descriptor_request__get_packed_size(
	const BluetoothGATTWriteDescriptorRequest *message);
size_t
bluetooth_gattwrite_descriptor_request__pack(const BluetoothGATTWriteDescriptorRequest *message,
					     uint8_t *out);
size_t bluetooth_gattwrite_descriptor_request__pack_to_buffer(
	const BluetoothGATTWriteDescriptorRequest *message, ProtobufCBuffer *buffer);
BluetoothGATTWriteDescriptorRequest *
bluetooth_gattwrite_descriptor_request__unpack(ProtobufCAllocator *allocator, size_t len,
					       const uint8_t *data);
void bluetooth_gattwrite_descriptor_request__free_unpacked(
	BluetoothGATTWriteDescriptorRequest *message, ProtobufCAllocator *allocator);
/* BluetoothGATTNotifyRequest methods */
void bluetooth_gattnotify_request__init(BluetoothGATTNotifyRequest *message);
size_t bluetooth_gattnotify_request__get_packed_size(const BluetoothGATTNotifyRequest *message);
size_t bluetooth_gattnotify_request__pack(const BluetoothGATTNotifyRequest *message, uint8_t *out);
size_t bluetooth_gattnotify_request__pack_to_buffer(const BluetoothGATTNotifyRequest *message,
						    ProtobufCBuffer *buffer);
BluetoothGATTNotifyRequest *bluetooth_gattnotify_request__unpack(ProtobufCAllocator *allocator,
								 size_t len, const uint8_t *data);
void bluetooth_gattnotify_request__free_unpacked(BluetoothGATTNotifyRequest *message,
						 ProtobufCAllocator *allocator);
/* BluetoothGATTNotifyDataResponse methods */
void bluetooth_gattnotify_data_response__init(BluetoothGATTNotifyDataResponse *message);
size_t
bluetooth_gattnotify_data_response__get_packed_size(const BluetoothGATTNotifyDataResponse *message);
size_t bluetooth_gattnotify_data_response__pack(const BluetoothGATTNotifyDataResponse *message,
						uint8_t *out);
size_t
bluetooth_gattnotify_data_response__pack_to_buffer(const BluetoothGATTNotifyDataResponse *message,
						   ProtobufCBuffer *buffer);
BluetoothGATTNotifyDataResponse *
bluetooth_gattnotify_data_response__unpack(ProtobufCAllocator *allocator, size_t len,
					   const uint8_t *data);
void bluetooth_gattnotify_data_response__free_unpacked(BluetoothGATTNotifyDataResponse *message,
						       ProtobufCAllocator *allocator);
/* SubscribeBluetoothConnectionsFreeRequest methods */
void subscribe_bluetooth_connections_free_request__init(
	SubscribeBluetoothConnectionsFreeRequest *message);
size_t subscribe_bluetooth_connections_free_request__get_packed_size(
	const SubscribeBluetoothConnectionsFreeRequest *message);
size_t subscribe_bluetooth_connections_free_request__pack(
	const SubscribeBluetoothConnectionsFreeRequest *message, uint8_t *out);
size_t subscribe_bluetooth_connections_free_request__pack_to_buffer(
	const SubscribeBluetoothConnectionsFreeRequest *message, ProtobufCBuffer *buffer);
SubscribeBluetoothConnectionsFreeRequest *
subscribe_bluetooth_connections_free_request__unpack(ProtobufCAllocator *allocator, size_t len,
						     const uint8_t *data);
void subscribe_bluetooth_connections_free_request__free_unpacked(
	SubscribeBluetoothConnectionsFreeRequest *message, ProtobufCAllocator *allocator);
/* BluetoothConnectionsFreeResponse methods */
void bluetooth_connections_free_response__init(BluetoothConnectionsFreeResponse *message);
size_t bluetooth_connections_free_response__get_packed_size(
	const BluetoothConnectionsFreeResponse *message);
size_t bluetooth_connections_free_response__pack(const BluetoothConnectionsFreeResponse *message,
						 uint8_t *out);
size_t
bluetooth_connections_free_response__pack_to_buffer(const BluetoothConnectionsFreeResponse *message,
						    ProtobufCBuffer *buffer);
BluetoothConnectionsFreeResponse *
bluetooth_connections_free_response__unpack(ProtobufCAllocator *allocator, size_t len,
					    const uint8_t *data);
void bluetooth_connections_free_response__free_unpacked(BluetoothConnectionsFreeResponse *message,
							ProtobufCAllocator *allocator);
/* BluetoothGATTErrorResponse methods */
void bluetooth_gatterror_response__init(BluetoothGATTErrorResponse *message);
size_t bluetooth_gatterror_response__get_packed_size(const BluetoothGATTErrorResponse *message);
size_t bluetooth_gatterror_response__pack(const BluetoothGATTErrorResponse *message, uint8_t *out);
size_t bluetooth_gatterror_response__pack_to_buffer(const BluetoothGATTErrorResponse *message,
						    ProtobufCBuffer *buffer);
BluetoothGATTErrorResponse *bluetooth_gatterror_response__unpack(ProtobufCAllocator *allocator,
								 size_t len, const uint8_t *data);
void bluetooth_gatterror_response__free_unpacked(BluetoothGATTErrorResponse *message,
						 ProtobufCAllocator *allocator);
/* BluetoothGATTWriteResponse methods */
void bluetooth_gattwrite_response__init(BluetoothGATTWriteResponse *message);
size_t bluetooth_gattwrite_response__get_packed_size(const BluetoothGATTWriteResponse *message);
size_t bluetooth_gattwrite_response__pack(const BluetoothGATTWriteResponse *message, uint8_t *out);
size_t bluetooth_gattwrite_response__pack_to_buffer(const BluetoothGATTWriteResponse *message,
						    ProtobufCBuffer *buffer);
BluetoothGATTWriteResponse *bluetooth_gattwrite_response__unpack(ProtobufCAllocator *allocator,
								 size_t len, const uint8_t *data);
void bluetooth_gattwrite_response__free_unpacked(BluetoothGATTWriteResponse *message,
						 ProtobufCAllocator *allocator);
/* BluetoothGATTNotifyResponse methods */
void bluetooth_gattnotify_response__init(BluetoothGATTNotifyResponse *message);
size_t bluetooth_gattnotify_response__get_packed_size(const BluetoothGATTNotifyResponse *message);
size_t bluetooth_gattnotify_response__pack(const BluetoothGATTNotifyResponse *message,
					   uint8_t *out);
size_t bluetooth_gattnotify_response__pack_to_buffer(const BluetoothGATTNotifyResponse *message,
						     ProtobufCBuffer *buffer);
BluetoothGATTNotifyResponse *bluetooth_gattnotify_response__unpack(ProtobufCAllocator *allocator,
								   size_t len, const uint8_t *data);
void bluetooth_gattnotify_response__free_unpacked(BluetoothGATTNotifyResponse *message,
						  ProtobufCAllocator *allocator);
/* BluetoothDevicePairingResponse methods */
void bluetooth_device_pairing_response__init(BluetoothDevicePairingResponse *message);
size_t
bluetooth_device_pairing_response__get_packed_size(const BluetoothDevicePairingResponse *message);
size_t bluetooth_device_pairing_response__pack(const BluetoothDevicePairingResponse *message,
					       uint8_t *out);
size_t
bluetooth_device_pairing_response__pack_to_buffer(const BluetoothDevicePairingResponse *message,
						  ProtobufCBuffer *buffer);
BluetoothDevicePairingResponse *
bluetooth_device_pairing_response__unpack(ProtobufCAllocator *allocator, size_t len,
					  const uint8_t *data);
void bluetooth_device_pairing_response__free_unpacked(BluetoothDevicePairingResponse *message,
						      ProtobufCAllocator *allocator);
/* BluetoothDeviceUnpairingResponse methods */
void bluetooth_device_unpairing_response__init(BluetoothDeviceUnpairingResponse *message);
size_t bluetooth_device_unpairing_response__get_packed_size(
	const BluetoothDeviceUnpairingResponse *message);
size_t bluetooth_device_unpairing_response__pack(const BluetoothDeviceUnpairingResponse *message,
						 uint8_t *out);
size_t
bluetooth_device_unpairing_response__pack_to_buffer(const BluetoothDeviceUnpairingResponse *message,
						    ProtobufCBuffer *buffer);
BluetoothDeviceUnpairingResponse *
bluetooth_device_unpairing_response__unpack(ProtobufCAllocator *allocator, size_t len,
					    const uint8_t *data);
void bluetooth_device_unpairing_response__free_unpacked(BluetoothDeviceUnpairingResponse *message,
							ProtobufCAllocator *allocator);
/* UnsubscribeBluetoothLEAdvertisementsRequest methods */
void unsubscribe_bluetooth_leadvertisements_request__init(
	UnsubscribeBluetoothLEAdvertisementsRequest *message);
size_t unsubscribe_bluetooth_leadvertisements_request__get_packed_size(
	const UnsubscribeBluetoothLEAdvertisementsRequest *message);
size_t unsubscribe_bluetooth_leadvertisements_request__pack(
	const UnsubscribeBluetoothLEAdvertisementsRequest *message, uint8_t *out);
size_t unsubscribe_bluetooth_leadvertisements_request__pack_to_buffer(
	const UnsubscribeBluetoothLEAdvertisementsRequest *message, ProtobufCBuffer *buffer);
UnsubscribeBluetoothLEAdvertisementsRequest *
unsubscribe_bluetooth_leadvertisements_request__unpack(ProtobufCAllocator *allocator, size_t len,
						       const uint8_t *data);
void unsubscribe_bluetooth_leadvertisements_request__free_unpacked(
	UnsubscribeBluetoothLEAdvertisementsRequest *message, ProtobufCAllocator *allocator);
/* BluetoothDeviceClearCacheResponse methods */
void bluetooth_device_clear_cache_response__init(BluetoothDeviceClearCacheResponse *message);
size_t bluetooth_device_clear_cache_response__get_packed_size(
	const BluetoothDeviceClearCacheResponse *message);
size_t bluetooth_device_clear_cache_response__pack(const BluetoothDeviceClearCacheResponse *message,
						   uint8_t *out);
size_t bluetooth_device_clear_cache_response__pack_to_buffer(
	const BluetoothDeviceClearCacheResponse *message, ProtobufCBuffer *buffer);
BluetoothDeviceClearCacheResponse *
bluetooth_device_clear_cache_response__unpack(ProtobufCAllocator *allocator, size_t len,
					      const uint8_t *data);
void bluetooth_device_clear_cache_response__free_unpacked(
	BluetoothDeviceClearCacheResponse *message, ProtobufCAllocator *allocator);
/* SubscribeVoiceAssistantRequest methods */
void subscribe_voice_assistant_request__init(SubscribeVoiceAssistantRequest *message);
size_t
subscribe_voice_assistant_request__get_packed_size(const SubscribeVoiceAssistantRequest *message);
size_t subscribe_voice_assistant_request__pack(const SubscribeVoiceAssistantRequest *message,
					       uint8_t *out);
size_t
subscribe_voice_assistant_request__pack_to_buffer(const SubscribeVoiceAssistantRequest *message,
						  ProtobufCBuffer *buffer);
SubscribeVoiceAssistantRequest *
subscribe_voice_assistant_request__unpack(ProtobufCAllocator *allocator, size_t len,
					  const uint8_t *data);
void subscribe_voice_assistant_request__free_unpacked(SubscribeVoiceAssistantRequest *message,
						      ProtobufCAllocator *allocator);
/* VoiceAssistantAudioSettings methods */
void voice_assistant_audio_settings__init(VoiceAssistantAudioSettings *message);
size_t voice_assistant_audio_settings__get_packed_size(const VoiceAssistantAudioSettings *message);
size_t voice_assistant_audio_settings__pack(const VoiceAssistantAudioSettings *message,
					    uint8_t *out);
size_t voice_assistant_audio_settings__pack_to_buffer(const VoiceAssistantAudioSettings *message,
						      ProtobufCBuffer *buffer);
VoiceAssistantAudioSettings *voice_assistant_audio_settings__unpack(ProtobufCAllocator *allocator,
								    size_t len,
								    const uint8_t *data);
void voice_assistant_audio_settings__free_unpacked(VoiceAssistantAudioSettings *message,
						   ProtobufCAllocator *allocator);
/* VoiceAssistantRequest methods */
void voice_assistant_request__init(VoiceAssistantRequest *message);
size_t voice_assistant_request__get_packed_size(const VoiceAssistantRequest *message);
size_t voice_assistant_request__pack(const VoiceAssistantRequest *message, uint8_t *out);
size_t voice_assistant_request__pack_to_buffer(const VoiceAssistantRequest *message,
					       ProtobufCBuffer *buffer);
VoiceAssistantRequest *voice_assistant_request__unpack(ProtobufCAllocator *allocator, size_t len,
						       const uint8_t *data);
void voice_assistant_request__free_unpacked(VoiceAssistantRequest *message,
					    ProtobufCAllocator *allocator);
/* VoiceAssistantResponse methods */
void voice_assistant_response__init(VoiceAssistantResponse *message);
size_t voice_assistant_response__get_packed_size(const VoiceAssistantResponse *message);
size_t voice_assistant_response__pack(const VoiceAssistantResponse *message, uint8_t *out);
size_t voice_assistant_response__pack_to_buffer(const VoiceAssistantResponse *message,
						ProtobufCBuffer *buffer);
VoiceAssistantResponse *voice_assistant_response__unpack(ProtobufCAllocator *allocator, size_t len,
							 const uint8_t *data);
void voice_assistant_response__free_unpacked(VoiceAssistantResponse *message,
					     ProtobufCAllocator *allocator);
/* VoiceAssistantEventData methods */
void voice_assistant_event_data__init(VoiceAssistantEventData *message);
size_t voice_assistant_event_data__get_packed_size(const VoiceAssistantEventData *message);
size_t voice_assistant_event_data__pack(const VoiceAssistantEventData *message, uint8_t *out);
size_t voice_assistant_event_data__pack_to_buffer(const VoiceAssistantEventData *message,
						  ProtobufCBuffer *buffer);
VoiceAssistantEventData *voice_assistant_event_data__unpack(ProtobufCAllocator *allocator,
							    size_t len, const uint8_t *data);
void voice_assistant_event_data__free_unpacked(VoiceAssistantEventData *message,
					       ProtobufCAllocator *allocator);
/* VoiceAssistantEventResponse methods */
void voice_assistant_event_response__init(VoiceAssistantEventResponse *message);
size_t voice_assistant_event_response__get_packed_size(const VoiceAssistantEventResponse *message);
size_t voice_assistant_event_response__pack(const VoiceAssistantEventResponse *message,
					    uint8_t *out);
size_t voice_assistant_event_response__pack_to_buffer(const VoiceAssistantEventResponse *message,
						      ProtobufCBuffer *buffer);
VoiceAssistantEventResponse *voice_assistant_event_response__unpack(ProtobufCAllocator *allocator,
								    size_t len,
								    const uint8_t *data);
void voice_assistant_event_response__free_unpacked(VoiceAssistantEventResponse *message,
						   ProtobufCAllocator *allocator);
/* VoiceAssistantAudio methods */
void voice_assistant_audio__init(VoiceAssistantAudio *message);
size_t voice_assistant_audio__get_packed_size(const VoiceAssistantAudio *message);
size_t voice_assistant_audio__pack(const VoiceAssistantAudio *message, uint8_t *out);
size_t voice_assistant_audio__pack_to_buffer(const VoiceAssistantAudio *message,
					     ProtobufCBuffer *buffer);
VoiceAssistantAudio *voice_assistant_audio__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void voice_assistant_audio__free_unpacked(VoiceAssistantAudio *message,
					  ProtobufCAllocator *allocator);
/* VoiceAssistantTimerEventResponse methods */
void voice_assistant_timer_event_response__init(VoiceAssistantTimerEventResponse *message);
size_t voice_assistant_timer_event_response__get_packed_size(
	const VoiceAssistantTimerEventResponse *message);
size_t voice_assistant_timer_event_response__pack(const VoiceAssistantTimerEventResponse *message,
						  uint8_t *out);
size_t voice_assistant_timer_event_response__pack_to_buffer(
	const VoiceAssistantTimerEventResponse *message, ProtobufCBuffer *buffer);
VoiceAssistantTimerEventResponse *
voice_assistant_timer_event_response__unpack(ProtobufCAllocator *allocator, size_t len,
					     const uint8_t *data);
void voice_assistant_timer_event_response__free_unpacked(VoiceAssistantTimerEventResponse *message,
							 ProtobufCAllocator *allocator);
/* VoiceAssistantAnnounceRequest methods */
void voice_assistant_announce_request__init(VoiceAssistantAnnounceRequest *message);
size_t
voice_assistant_announce_request__get_packed_size(const VoiceAssistantAnnounceRequest *message);
size_t voice_assistant_announce_request__pack(const VoiceAssistantAnnounceRequest *message,
					      uint8_t *out);
size_t
voice_assistant_announce_request__pack_to_buffer(const VoiceAssistantAnnounceRequest *message,
						 ProtobufCBuffer *buffer);
VoiceAssistantAnnounceRequest *
voice_assistant_announce_request__unpack(ProtobufCAllocator *allocator, size_t len,
					 const uint8_t *data);
void voice_assistant_announce_request__free_unpacked(VoiceAssistantAnnounceRequest *message,
						     ProtobufCAllocator *allocator);
/* VoiceAssistantAnnounceFinished methods */
void voice_assistant_announce_finished__init(VoiceAssistantAnnounceFinished *message);
size_t
voice_assistant_announce_finished__get_packed_size(const VoiceAssistantAnnounceFinished *message);
size_t voice_assistant_announce_finished__pack(const VoiceAssistantAnnounceFinished *message,
					       uint8_t *out);
size_t
voice_assistant_announce_finished__pack_to_buffer(const VoiceAssistantAnnounceFinished *message,
						  ProtobufCBuffer *buffer);
VoiceAssistantAnnounceFinished *
voice_assistant_announce_finished__unpack(ProtobufCAllocator *allocator, size_t len,
					  const uint8_t *data);
void voice_assistant_announce_finished__free_unpacked(VoiceAssistantAnnounceFinished *message,
						      ProtobufCAllocator *allocator);
/* VoiceAssistantWakeWord methods */
void voice_assistant_wake_word__init(VoiceAssistantWakeWord *message);
size_t voice_assistant_wake_word__get_packed_size(const VoiceAssistantWakeWord *message);
size_t voice_assistant_wake_word__pack(const VoiceAssistantWakeWord *message, uint8_t *out);
size_t voice_assistant_wake_word__pack_to_buffer(const VoiceAssistantWakeWord *message,
						 ProtobufCBuffer *buffer);
VoiceAssistantWakeWord *voice_assistant_wake_word__unpack(ProtobufCAllocator *allocator, size_t len,
							  const uint8_t *data);
void voice_assistant_wake_word__free_unpacked(VoiceAssistantWakeWord *message,
					      ProtobufCAllocator *allocator);
/* VoiceAssistantConfigurationRequest methods */
void voice_assistant_configuration_request__init(VoiceAssistantConfigurationRequest *message);
size_t voice_assistant_configuration_request__get_packed_size(
	const VoiceAssistantConfigurationRequest *message);
size_t
voice_assistant_configuration_request__pack(const VoiceAssistantConfigurationRequest *message,
					    uint8_t *out);
size_t voice_assistant_configuration_request__pack_to_buffer(
	const VoiceAssistantConfigurationRequest *message, ProtobufCBuffer *buffer);
VoiceAssistantConfigurationRequest *
voice_assistant_configuration_request__unpack(ProtobufCAllocator *allocator, size_t len,
					      const uint8_t *data);
void voice_assistant_configuration_request__free_unpacked(
	VoiceAssistantConfigurationRequest *message, ProtobufCAllocator *allocator);
/* VoiceAssistantConfigurationResponse methods */
void voice_assistant_configuration_response__init(VoiceAssistantConfigurationResponse *message);
size_t voice_assistant_configuration_response__get_packed_size(
	const VoiceAssistantConfigurationResponse *message);
size_t
voice_assistant_configuration_response__pack(const VoiceAssistantConfigurationResponse *message,
					     uint8_t *out);
size_t voice_assistant_configuration_response__pack_to_buffer(
	const VoiceAssistantConfigurationResponse *message, ProtobufCBuffer *buffer);
VoiceAssistantConfigurationResponse *
voice_assistant_configuration_response__unpack(ProtobufCAllocator *allocator, size_t len,
					       const uint8_t *data);
void voice_assistant_configuration_response__free_unpacked(
	VoiceAssistantConfigurationResponse *message, ProtobufCAllocator *allocator);
/* VoiceAssistantSetConfiguration methods */
void voice_assistant_set_configuration__init(VoiceAssistantSetConfiguration *message);
size_t
voice_assistant_set_configuration__get_packed_size(const VoiceAssistantSetConfiguration *message);
size_t voice_assistant_set_configuration__pack(const VoiceAssistantSetConfiguration *message,
					       uint8_t *out);
size_t
voice_assistant_set_configuration__pack_to_buffer(const VoiceAssistantSetConfiguration *message,
						  ProtobufCBuffer *buffer);
VoiceAssistantSetConfiguration *
voice_assistant_set_configuration__unpack(ProtobufCAllocator *allocator, size_t len,
					  const uint8_t *data);
void voice_assistant_set_configuration__free_unpacked(VoiceAssistantSetConfiguration *message,
						      ProtobufCAllocator *allocator);
/* ListEntitiesAlarmControlPanelResponse methods */
void list_entities_alarm_control_panel_response__init(
	ListEntitiesAlarmControlPanelResponse *message);
size_t list_entities_alarm_control_panel_response__get_packed_size(
	const ListEntitiesAlarmControlPanelResponse *message);
size_t list_entities_alarm_control_panel_response__pack(
	const ListEntitiesAlarmControlPanelResponse *message, uint8_t *out);
size_t list_entities_alarm_control_panel_response__pack_to_buffer(
	const ListEntitiesAlarmControlPanelResponse *message, ProtobufCBuffer *buffer);
ListEntitiesAlarmControlPanelResponse *
list_entities_alarm_control_panel_response__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void list_entities_alarm_control_panel_response__free_unpacked(
	ListEntitiesAlarmControlPanelResponse *message, ProtobufCAllocator *allocator);
/* AlarmControlPanelStateResponse methods */
void alarm_control_panel_state_response__init(AlarmControlPanelStateResponse *message);
size_t
alarm_control_panel_state_response__get_packed_size(const AlarmControlPanelStateResponse *message);
size_t alarm_control_panel_state_response__pack(const AlarmControlPanelStateResponse *message,
						uint8_t *out);
size_t
alarm_control_panel_state_response__pack_to_buffer(const AlarmControlPanelStateResponse *message,
						   ProtobufCBuffer *buffer);
AlarmControlPanelStateResponse *
alarm_control_panel_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
					   const uint8_t *data);
void alarm_control_panel_state_response__free_unpacked(AlarmControlPanelStateResponse *message,
						       ProtobufCAllocator *allocator);
/* AlarmControlPanelCommandRequest methods */
void alarm_control_panel_command_request__init(AlarmControlPanelCommandRequest *message);
size_t alarm_control_panel_command_request__get_packed_size(
	const AlarmControlPanelCommandRequest *message);
size_t alarm_control_panel_command_request__pack(const AlarmControlPanelCommandRequest *message,
						 uint8_t *out);
size_t
alarm_control_panel_command_request__pack_to_buffer(const AlarmControlPanelCommandRequest *message,
						    ProtobufCBuffer *buffer);
AlarmControlPanelCommandRequest *
alarm_control_panel_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
					    const uint8_t *data);
void alarm_control_panel_command_request__free_unpacked(AlarmControlPanelCommandRequest *message,
							ProtobufCAllocator *allocator);
/* ListEntitiesTextResponse methods */
void list_entities_text_response__init(ListEntitiesTextResponse *message);
size_t list_entities_text_response__get_packed_size(const ListEntitiesTextResponse *message);
size_t list_entities_text_response__pack(const ListEntitiesTextResponse *message, uint8_t *out);
size_t list_entities_text_response__pack_to_buffer(const ListEntitiesTextResponse *message,
						   ProtobufCBuffer *buffer);
ListEntitiesTextResponse *list_entities_text_response__unpack(ProtobufCAllocator *allocator,
							      size_t len, const uint8_t *data);
void list_entities_text_response__free_unpacked(ListEntitiesTextResponse *message,
						ProtobufCAllocator *allocator);
/* TextStateResponse methods */
void text_state_response__init(TextStateResponse *message);
size_t text_state_response__get_packed_size(const TextStateResponse *message);
size_t text_state_response__pack(const TextStateResponse *message, uint8_t *out);
size_t text_state_response__pack_to_buffer(const TextStateResponse *message,
					   ProtobufCBuffer *buffer);
TextStateResponse *text_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
					       const uint8_t *data);
void text_state_response__free_unpacked(TextStateResponse *message, ProtobufCAllocator *allocator);
/* TextCommandRequest methods */
void text_command_request__init(TextCommandRequest *message);
size_t text_command_request__get_packed_size(const TextCommandRequest *message);
size_t text_command_request__pack(const TextCommandRequest *message, uint8_t *out);
size_t text_command_request__pack_to_buffer(const TextCommandRequest *message,
					    ProtobufCBuffer *buffer);
TextCommandRequest *text_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						 const uint8_t *data);
void text_command_request__free_unpacked(TextCommandRequest *message,
					 ProtobufCAllocator *allocator);
/* ListEntitiesDateResponse methods */
void list_entities_date_response__init(ListEntitiesDateResponse *message);
size_t list_entities_date_response__get_packed_size(const ListEntitiesDateResponse *message);
size_t list_entities_date_response__pack(const ListEntitiesDateResponse *message, uint8_t *out);
size_t list_entities_date_response__pack_to_buffer(const ListEntitiesDateResponse *message,
						   ProtobufCBuffer *buffer);
ListEntitiesDateResponse *list_entities_date_response__unpack(ProtobufCAllocator *allocator,
							      size_t len, const uint8_t *data);
void list_entities_date_response__free_unpacked(ListEntitiesDateResponse *message,
						ProtobufCAllocator *allocator);
/* DateStateResponse methods */
void date_state_response__init(DateStateResponse *message);
size_t date_state_response__get_packed_size(const DateStateResponse *message);
size_t date_state_response__pack(const DateStateResponse *message, uint8_t *out);
size_t date_state_response__pack_to_buffer(const DateStateResponse *message,
					   ProtobufCBuffer *buffer);
DateStateResponse *date_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
					       const uint8_t *data);
void date_state_response__free_unpacked(DateStateResponse *message, ProtobufCAllocator *allocator);
/* DateCommandRequest methods */
void date_command_request__init(DateCommandRequest *message);
size_t date_command_request__get_packed_size(const DateCommandRequest *message);
size_t date_command_request__pack(const DateCommandRequest *message, uint8_t *out);
size_t date_command_request__pack_to_buffer(const DateCommandRequest *message,
					    ProtobufCBuffer *buffer);
DateCommandRequest *date_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						 const uint8_t *data);
void date_command_request__free_unpacked(DateCommandRequest *message,
					 ProtobufCAllocator *allocator);
/* ListEntitiesTimeResponse methods */
void list_entities_time_response__init(ListEntitiesTimeResponse *message);
size_t list_entities_time_response__get_packed_size(const ListEntitiesTimeResponse *message);
size_t list_entities_time_response__pack(const ListEntitiesTimeResponse *message, uint8_t *out);
size_t list_entities_time_response__pack_to_buffer(const ListEntitiesTimeResponse *message,
						   ProtobufCBuffer *buffer);
ListEntitiesTimeResponse *list_entities_time_response__unpack(ProtobufCAllocator *allocator,
							      size_t len, const uint8_t *data);
void list_entities_time_response__free_unpacked(ListEntitiesTimeResponse *message,
						ProtobufCAllocator *allocator);
/* TimeStateResponse methods */
void time_state_response__init(TimeStateResponse *message);
size_t time_state_response__get_packed_size(const TimeStateResponse *message);
size_t time_state_response__pack(const TimeStateResponse *message, uint8_t *out);
size_t time_state_response__pack_to_buffer(const TimeStateResponse *message,
					   ProtobufCBuffer *buffer);
TimeStateResponse *time_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
					       const uint8_t *data);
void time_state_response__free_unpacked(TimeStateResponse *message, ProtobufCAllocator *allocator);
/* TimeCommandRequest methods */
void time_command_request__init(TimeCommandRequest *message);
size_t time_command_request__get_packed_size(const TimeCommandRequest *message);
size_t time_command_request__pack(const TimeCommandRequest *message, uint8_t *out);
size_t time_command_request__pack_to_buffer(const TimeCommandRequest *message,
					    ProtobufCBuffer *buffer);
TimeCommandRequest *time_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						 const uint8_t *data);
void time_command_request__free_unpacked(TimeCommandRequest *message,
					 ProtobufCAllocator *allocator);
/* ListEntitiesEventResponse methods */
void list_entities_event_response__init(ListEntitiesEventResponse *message);
size_t list_entities_event_response__get_packed_size(const ListEntitiesEventResponse *message);
size_t list_entities_event_response__pack(const ListEntitiesEventResponse *message, uint8_t *out);
size_t list_entities_event_response__pack_to_buffer(const ListEntitiesEventResponse *message,
						    ProtobufCBuffer *buffer);
ListEntitiesEventResponse *list_entities_event_response__unpack(ProtobufCAllocator *allocator,
								size_t len, const uint8_t *data);
void list_entities_event_response__free_unpacked(ListEntitiesEventResponse *message,
						 ProtobufCAllocator *allocator);
/* EventResponse methods */
void event_response__init(EventResponse *message);
size_t event_response__get_packed_size(const EventResponse *message);
size_t event_response__pack(const EventResponse *message, uint8_t *out);
size_t event_response__pack_to_buffer(const EventResponse *message, ProtobufCBuffer *buffer);
EventResponse *event_response__unpack(ProtobufCAllocator *allocator, size_t len,
				      const uint8_t *data);
void event_response__free_unpacked(EventResponse *message, ProtobufCAllocator *allocator);
/* ListEntitiesValveResponse methods */
void list_entities_valve_response__init(ListEntitiesValveResponse *message);
size_t list_entities_valve_response__get_packed_size(const ListEntitiesValveResponse *message);
size_t list_entities_valve_response__pack(const ListEntitiesValveResponse *message, uint8_t *out);
size_t list_entities_valve_response__pack_to_buffer(const ListEntitiesValveResponse *message,
						    ProtobufCBuffer *buffer);
ListEntitiesValveResponse *list_entities_valve_response__unpack(ProtobufCAllocator *allocator,
								size_t len, const uint8_t *data);
void list_entities_valve_response__free_unpacked(ListEntitiesValveResponse *message,
						 ProtobufCAllocator *allocator);
/* ValveStateResponse methods */
void valve_state_response__init(ValveStateResponse *message);
size_t valve_state_response__get_packed_size(const ValveStateResponse *message);
size_t valve_state_response__pack(const ValveStateResponse *message, uint8_t *out);
size_t valve_state_response__pack_to_buffer(const ValveStateResponse *message,
					    ProtobufCBuffer *buffer);
ValveStateResponse *valve_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
						 const uint8_t *data);
void valve_state_response__free_unpacked(ValveStateResponse *message,
					 ProtobufCAllocator *allocator);
/* ValveCommandRequest methods */
void valve_command_request__init(ValveCommandRequest *message);
size_t valve_command_request__get_packed_size(const ValveCommandRequest *message);
size_t valve_command_request__pack(const ValveCommandRequest *message, uint8_t *out);
size_t valve_command_request__pack_to_buffer(const ValveCommandRequest *message,
					     ProtobufCBuffer *buffer);
ValveCommandRequest *valve_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void valve_command_request__free_unpacked(ValveCommandRequest *message,
					  ProtobufCAllocator *allocator);
/* ListEntitiesDateTimeResponse methods */
void list_entities_date_time_response__init(ListEntitiesDateTimeResponse *message);
size_t
list_entities_date_time_response__get_packed_size(const ListEntitiesDateTimeResponse *message);
size_t list_entities_date_time_response__pack(const ListEntitiesDateTimeResponse *message,
					      uint8_t *out);
size_t list_entities_date_time_response__pack_to_buffer(const ListEntitiesDateTimeResponse *message,
							ProtobufCBuffer *buffer);
ListEntitiesDateTimeResponse *
list_entities_date_time_response__unpack(ProtobufCAllocator *allocator, size_t len,
					 const uint8_t *data);
void list_entities_date_time_response__free_unpacked(ListEntitiesDateTimeResponse *message,
						     ProtobufCAllocator *allocator);
/* DateTimeStateResponse methods */
void date_time_state_response__init(DateTimeStateResponse *message);
size_t date_time_state_response__get_packed_size(const DateTimeStateResponse *message);
size_t date_time_state_response__pack(const DateTimeStateResponse *message, uint8_t *out);
size_t date_time_state_response__pack_to_buffer(const DateTimeStateResponse *message,
						ProtobufCBuffer *buffer);
DateTimeStateResponse *date_time_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
							const uint8_t *data);
void date_time_state_response__free_unpacked(DateTimeStateResponse *message,
					     ProtobufCAllocator *allocator);
/* DateTimeCommandRequest methods */
void date_time_command_request__init(DateTimeCommandRequest *message);
size_t date_time_command_request__get_packed_size(const DateTimeCommandRequest *message);
size_t date_time_command_request__pack(const DateTimeCommandRequest *message, uint8_t *out);
size_t date_time_command_request__pack_to_buffer(const DateTimeCommandRequest *message,
						 ProtobufCBuffer *buffer);
DateTimeCommandRequest *date_time_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
							  const uint8_t *data);
void date_time_command_request__free_unpacked(DateTimeCommandRequest *message,
					      ProtobufCAllocator *allocator);
/* ListEntitiesUpdateResponse methods */
void list_entities_update_response__init(ListEntitiesUpdateResponse *message);
size_t list_entities_update_response__get_packed_size(const ListEntitiesUpdateResponse *message);
size_t list_entities_update_response__pack(const ListEntitiesUpdateResponse *message, uint8_t *out);
size_t list_entities_update_response__pack_to_buffer(const ListEntitiesUpdateResponse *message,
						     ProtobufCBuffer *buffer);
ListEntitiesUpdateResponse *list_entities_update_response__unpack(ProtobufCAllocator *allocator,
								  size_t len, const uint8_t *data);
void list_entities_update_response__free_unpacked(ListEntitiesUpdateResponse *message,
						  ProtobufCAllocator *allocator);
/* UpdateStateResponse methods */
void update_state_response__init(UpdateStateResponse *message);
size_t update_state_response__get_packed_size(const UpdateStateResponse *message);
size_t update_state_response__pack(const UpdateStateResponse *message, uint8_t *out);
size_t update_state_response__pack_to_buffer(const UpdateStateResponse *message,
					     ProtobufCBuffer *buffer);
UpdateStateResponse *update_state_response__unpack(ProtobufCAllocator *allocator, size_t len,
						   const uint8_t *data);
void update_state_response__free_unpacked(UpdateStateResponse *message,
					  ProtobufCAllocator *allocator);
/* UpdateCommandRequest methods */
void update_command_request__init(UpdateCommandRequest *message);
size_t update_command_request__get_packed_size(const UpdateCommandRequest *message);
size_t update_command_request__pack(const UpdateCommandRequest *message, uint8_t *out);
size_t update_command_request__pack_to_buffer(const UpdateCommandRequest *message,
					      ProtobufCBuffer *buffer);
UpdateCommandRequest *update_command_request__unpack(ProtobufCAllocator *allocator, size_t len,
						     const uint8_t *data);
void update_command_request__free_unpacked(UpdateCommandRequest *message,
					   ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*HelloRequest_Closure)(const HelloRequest *message, void *closure_data);
typedef void (*HelloResponse_Closure)(const HelloResponse *message, void *closure_data);
typedef void (*ConnectRequest_Closure)(const ConnectRequest *message, void *closure_data);
typedef void (*ConnectResponse_Closure)(const ConnectResponse *message, void *closure_data);
typedef void (*DisconnectRequest_Closure)(const DisconnectRequest *message, void *closure_data);
typedef void (*DisconnectResponse_Closure)(const DisconnectResponse *message, void *closure_data);
typedef void (*PingRequest_Closure)(const PingRequest *message, void *closure_data);
typedef void (*PingResponse_Closure)(const PingResponse *message, void *closure_data);
typedef void (*DeviceInfoRequest_Closure)(const DeviceInfoRequest *message, void *closure_data);
typedef void (*DeviceInfoResponse_Closure)(const DeviceInfoResponse *message, void *closure_data);
typedef void (*ListEntitiesRequest_Closure)(const ListEntitiesRequest *message, void *closure_data);
typedef void (*ListEntitiesDoneResponse_Closure)(const ListEntitiesDoneResponse *message,
						 void *closure_data);
typedef void (*SubscribeStatesRequest_Closure)(const SubscribeStatesRequest *message,
					       void *closure_data);
typedef void (*ListEntitiesBinarySensorResponse_Closure)(
	const ListEntitiesBinarySensorResponse *message, void *closure_data);
typedef void (*BinarySensorStateResponse_Closure)(const BinarySensorStateResponse *message,
						  void *closure_data);
typedef void (*ListEntitiesCoverResponse_Closure)(const ListEntitiesCoverResponse *message,
						  void *closure_data);
typedef void (*CoverStateResponse_Closure)(const CoverStateResponse *message, void *closure_data);
typedef void (*CoverCommandRequest_Closure)(const CoverCommandRequest *message, void *closure_data);
typedef void (*ListEntitiesFanResponse_Closure)(const ListEntitiesFanResponse *message,
						void *closure_data);
typedef void (*FanStateResponse_Closure)(const FanStateResponse *message, void *closure_data);
typedef void (*FanCommandRequest_Closure)(const FanCommandRequest *message, void *closure_data);
typedef void (*ListEntitiesLightResponse_Closure)(const ListEntitiesLightResponse *message,
						  void *closure_data);
typedef void (*LightStateResponse_Closure)(const LightStateResponse *message, void *closure_data);
typedef void (*LightCommandRequest_Closure)(const LightCommandRequest *message, void *closure_data);
typedef void (*ListEntitiesSensorResponse_Closure)(const ListEntitiesSensorResponse *message,
						   void *closure_data);
typedef void (*SensorStateResponse_Closure)(const SensorStateResponse *message, void *closure_data);
typedef void (*ListEntitiesSwitchResponse_Closure)(const ListEntitiesSwitchResponse *message,
						   void *closure_data);
typedef void (*SwitchStateResponse_Closure)(const SwitchStateResponse *message, void *closure_data);
typedef void (*SwitchCommandRequest_Closure)(const SwitchCommandRequest *message,
					     void *closure_data);
typedef void (*ListEntitiesTextSensorResponse_Closure)(
	const ListEntitiesTextSensorResponse *message, void *closure_data);
typedef void (*TextSensorStateResponse_Closure)(const TextSensorStateResponse *message,
						void *closure_data);
typedef void (*SubscribeLogsRequest_Closure)(const SubscribeLogsRequest *message,
					     void *closure_data);
typedef void (*SubscribeLogsResponse_Closure)(const SubscribeLogsResponse *message,
					      void *closure_data);
typedef void (*SubscribeHomeassistantServicesRequest_Closure)(
	const SubscribeHomeassistantServicesRequest *message, void *closure_data);
typedef void (*HomeassistantServiceMap_Closure)(const HomeassistantServiceMap *message,
						void *closure_data);
typedef void (*HomeassistantServiceResponse_Closure)(const HomeassistantServiceResponse *message,
						     void *closure_data);
typedef void (*SubscribeHomeAssistantStatesRequest_Closure)(
	const SubscribeHomeAssistantStatesRequest *message, void *closure_data);
typedef void (*SubscribeHomeAssistantStateResponse_Closure)(
	const SubscribeHomeAssistantStateResponse *message, void *closure_data);
typedef void (*HomeAssistantStateResponse_Closure)(const HomeAssistantStateResponse *message,
						   void *closure_data);
typedef void (*GetTimeRequest_Closure)(const GetTimeRequest *message, void *closure_data);
typedef void (*GetTimeResponse_Closure)(const GetTimeResponse *message, void *closure_data);
typedef void (*ListEntitiesServicesArgument_Closure)(const ListEntitiesServicesArgument *message,
						     void *closure_data);
typedef void (*ListEntitiesServicesResponse_Closure)(const ListEntitiesServicesResponse *message,
						     void *closure_data);
typedef void (*ExecuteServiceArgument_Closure)(const ExecuteServiceArgument *message,
					       void *closure_data);
typedef void (*ExecuteServiceRequest_Closure)(const ExecuteServiceRequest *message,
					      void *closure_data);
typedef void (*ListEntitiesCameraResponse_Closure)(const ListEntitiesCameraResponse *message,
						   void *closure_data);
typedef void (*CameraImageResponse_Closure)(const CameraImageResponse *message, void *closure_data);
typedef void (*CameraImageRequest_Closure)(const CameraImageRequest *message, void *closure_data);
typedef void (*ListEntitiesClimateResponse_Closure)(const ListEntitiesClimateResponse *message,
						    void *closure_data);
typedef void (*ClimateStateResponse_Closure)(const ClimateStateResponse *message,
					     void *closure_data);
typedef void (*ClimateCommandRequest_Closure)(const ClimateCommandRequest *message,
					      void *closure_data);
typedef void (*ListEntitiesNumberResponse_Closure)(const ListEntitiesNumberResponse *message,
						   void *closure_data);
typedef void (*NumberStateResponse_Closure)(const NumberStateResponse *message, void *closure_data);
typedef void (*NumberCommandRequest_Closure)(const NumberCommandRequest *message,
					     void *closure_data);
typedef void (*ListEntitiesSelectResponse_Closure)(const ListEntitiesSelectResponse *message,
						   void *closure_data);
typedef void (*SelectStateResponse_Closure)(const SelectStateResponse *message, void *closure_data);
typedef void (*SelectCommandRequest_Closure)(const SelectCommandRequest *message,
					     void *closure_data);
typedef void (*ListEntitiesLockResponse_Closure)(const ListEntitiesLockResponse *message,
						 void *closure_data);
typedef void (*LockStateResponse_Closure)(const LockStateResponse *message, void *closure_data);
typedef void (*LockCommandRequest_Closure)(const LockCommandRequest *message, void *closure_data);
typedef void (*ListEntitiesButtonResponse_Closure)(const ListEntitiesButtonResponse *message,
						   void *closure_data);
typedef void (*ButtonCommandRequest_Closure)(const ButtonCommandRequest *message,
					     void *closure_data);
typedef void (*MediaPlayerSupportedFormat_Closure)(const MediaPlayerSupportedFormat *message,
						   void *closure_data);
typedef void (*ListEntitiesMediaPlayerResponse_Closure)(
	const ListEntitiesMediaPlayerResponse *message, void *closure_data);
typedef void (*MediaPlayerStateResponse_Closure)(const MediaPlayerStateResponse *message,
						 void *closure_data);
typedef void (*MediaPlayerCommandRequest_Closure)(const MediaPlayerCommandRequest *message,
						  void *closure_data);
typedef void (*SubscribeBluetoothLEAdvertisementsRequest_Closure)(
	const SubscribeBluetoothLEAdvertisementsRequest *message, void *closure_data);
typedef void (*BluetoothServiceData_Closure)(const BluetoothServiceData *message,
					     void *closure_data);
typedef void (*BluetoothLEAdvertisementResponse_Closure)(
	const BluetoothLEAdvertisementResponse *message, void *closure_data);
typedef void (*BluetoothLERawAdvertisement_Closure)(const BluetoothLERawAdvertisement *message,
						    void *closure_data);
typedef void (*BluetoothLERawAdvertisementsResponse_Closure)(
	const BluetoothLERawAdvertisementsResponse *message, void *closure_data);
typedef void (*BluetoothDeviceRequest_Closure)(const BluetoothDeviceRequest *message,
					       void *closure_data);
typedef void (*BluetoothDeviceConnectionResponse_Closure)(
	const BluetoothDeviceConnectionResponse *message, void *closure_data);
typedef void (*BluetoothGATTGetServicesRequest_Closure)(
	const BluetoothGATTGetServicesRequest *message, void *closure_data);
typedef void (*BluetoothGATTDescriptor_Closure)(const BluetoothGATTDescriptor *message,
						void *closure_data);
typedef void (*BluetoothGATTCharacteristic_Closure)(const BluetoothGATTCharacteristic *message,
						    void *closure_data);
typedef void (*BluetoothGATTService_Closure)(const BluetoothGATTService *message,
					     void *closure_data);
typedef void (*BluetoothGATTGetServicesResponse_Closure)(
	const BluetoothGATTGetServicesResponse *message, void *closure_data);
typedef void (*BluetoothGATTGetServicesDoneResponse_Closure)(
	const BluetoothGATTGetServicesDoneResponse *message, void *closure_data);
typedef void (*BluetoothGATTReadRequest_Closure)(const BluetoothGATTReadRequest *message,
						 void *closure_data);
typedef void (*BluetoothGATTReadResponse_Closure)(const BluetoothGATTReadResponse *message,
						  void *closure_data);
typedef void (*BluetoothGATTWriteRequest_Closure)(const BluetoothGATTWriteRequest *message,
						  void *closure_data);
typedef void (*BluetoothGATTReadDescriptorRequest_Closure)(
	const BluetoothGATTReadDescriptorRequest *message, void *closure_data);
typedef void (*BluetoothGATTWriteDescriptorRequest_Closure)(
	const BluetoothGATTWriteDescriptorRequest *message, void *closure_data);
typedef void (*BluetoothGATTNotifyRequest_Closure)(const BluetoothGATTNotifyRequest *message,
						   void *closure_data);
typedef void (*BluetoothGATTNotifyDataResponse_Closure)(
	const BluetoothGATTNotifyDataResponse *message, void *closure_data);
typedef void (*SubscribeBluetoothConnectionsFreeRequest_Closure)(
	const SubscribeBluetoothConnectionsFreeRequest *message, void *closure_data);
typedef void (*BluetoothConnectionsFreeResponse_Closure)(
	const BluetoothConnectionsFreeResponse *message, void *closure_data);
typedef void (*BluetoothGATTErrorResponse_Closure)(const BluetoothGATTErrorResponse *message,
						   void *closure_data);
typedef void (*BluetoothGATTWriteResponse_Closure)(const BluetoothGATTWriteResponse *message,
						   void *closure_data);
typedef void (*BluetoothGATTNotifyResponse_Closure)(const BluetoothGATTNotifyResponse *message,
						    void *closure_data);
typedef void (*BluetoothDevicePairingResponse_Closure)(
	const BluetoothDevicePairingResponse *message, void *closure_data);
typedef void (*BluetoothDeviceUnpairingResponse_Closure)(
	const BluetoothDeviceUnpairingResponse *message, void *closure_data);
typedef void (*UnsubscribeBluetoothLEAdvertisementsRequest_Closure)(
	const UnsubscribeBluetoothLEAdvertisementsRequest *message, void *closure_data);
typedef void (*BluetoothDeviceClearCacheResponse_Closure)(
	const BluetoothDeviceClearCacheResponse *message, void *closure_data);
typedef void (*SubscribeVoiceAssistantRequest_Closure)(
	const SubscribeVoiceAssistantRequest *message, void *closure_data);
typedef void (*VoiceAssistantAudioSettings_Closure)(const VoiceAssistantAudioSettings *message,
						    void *closure_data);
typedef void (*VoiceAssistantRequest_Closure)(const VoiceAssistantRequest *message,
					      void *closure_data);
typedef void (*VoiceAssistantResponse_Closure)(const VoiceAssistantResponse *message,
					       void *closure_data);
typedef void (*VoiceAssistantEventData_Closure)(const VoiceAssistantEventData *message,
						void *closure_data);
typedef void (*VoiceAssistantEventResponse_Closure)(const VoiceAssistantEventResponse *message,
						    void *closure_data);
typedef void (*VoiceAssistantAudio_Closure)(const VoiceAssistantAudio *message, void *closure_data);
typedef void (*VoiceAssistantTimerEventResponse_Closure)(
	const VoiceAssistantTimerEventResponse *message, void *closure_data);
typedef void (*VoiceAssistantAnnounceRequest_Closure)(const VoiceAssistantAnnounceRequest *message,
						      void *closure_data);
typedef void (*VoiceAssistantAnnounceFinished_Closure)(
	const VoiceAssistantAnnounceFinished *message, void *closure_data);
typedef void (*VoiceAssistantWakeWord_Closure)(const VoiceAssistantWakeWord *message,
					       void *closure_data);
typedef void (*VoiceAssistantConfigurationRequest_Closure)(
	const VoiceAssistantConfigurationRequest *message, void *closure_data);
typedef void (*VoiceAssistantConfigurationResponse_Closure)(
	const VoiceAssistantConfigurationResponse *message, void *closure_data);
typedef void (*VoiceAssistantSetConfiguration_Closure)(
	const VoiceAssistantSetConfiguration *message, void *closure_data);
typedef void (*ListEntitiesAlarmControlPanelResponse_Closure)(
	const ListEntitiesAlarmControlPanelResponse *message, void *closure_data);
typedef void (*AlarmControlPanelStateResponse_Closure)(
	const AlarmControlPanelStateResponse *message, void *closure_data);
typedef void (*AlarmControlPanelCommandRequest_Closure)(
	const AlarmControlPanelCommandRequest *message, void *closure_data);
typedef void (*ListEntitiesTextResponse_Closure)(const ListEntitiesTextResponse *message,
						 void *closure_data);
typedef void (*TextStateResponse_Closure)(const TextStateResponse *message, void *closure_data);
typedef void (*TextCommandRequest_Closure)(const TextCommandRequest *message, void *closure_data);
typedef void (*ListEntitiesDateResponse_Closure)(const ListEntitiesDateResponse *message,
						 void *closure_data);
typedef void (*DateStateResponse_Closure)(const DateStateResponse *message, void *closure_data);
typedef void (*DateCommandRequest_Closure)(const DateCommandRequest *message, void *closure_data);
typedef void (*ListEntitiesTimeResponse_Closure)(const ListEntitiesTimeResponse *message,
						 void *closure_data);
typedef void (*TimeStateResponse_Closure)(const TimeStateResponse *message, void *closure_data);
typedef void (*TimeCommandRequest_Closure)(const TimeCommandRequest *message, void *closure_data);
typedef void (*ListEntitiesEventResponse_Closure)(const ListEntitiesEventResponse *message,
						  void *closure_data);
typedef void (*EventResponse_Closure)(const EventResponse *message, void *closure_data);
typedef void (*ListEntitiesValveResponse_Closure)(const ListEntitiesValveResponse *message,
						  void *closure_data);
typedef void (*ValveStateResponse_Closure)(const ValveStateResponse *message, void *closure_data);
typedef void (*ValveCommandRequest_Closure)(const ValveCommandRequest *message, void *closure_data);
typedef void (*ListEntitiesDateTimeResponse_Closure)(const ListEntitiesDateTimeResponse *message,
						     void *closure_data);
typedef void (*DateTimeStateResponse_Closure)(const DateTimeStateResponse *message,
					      void *closure_data);
typedef void (*DateTimeCommandRequest_Closure)(const DateTimeCommandRequest *message,
					       void *closure_data);
typedef void (*ListEntitiesUpdateResponse_Closure)(const ListEntitiesUpdateResponse *message,
						   void *closure_data);
typedef void (*UpdateStateResponse_Closure)(const UpdateStateResponse *message, void *closure_data);
typedef void (*UpdateCommandRequest_Closure)(const UpdateCommandRequest *message,
					     void *closure_data);

/* --- services --- */

typedef struct APIConnection_Service APIConnection_Service;
struct APIConnection_Service {
	ProtobufCService base;
	void (*hello)(APIConnection_Service *service, const HelloRequest *input,
		      HelloResponse_Closure closure, void *closure_data);
	void (*connect)(APIConnection_Service *service, const ConnectRequest *input,
			ConnectResponse_Closure closure, void *closure_data);
	void (*disconnect)(APIConnection_Service *service, const DisconnectRequest *input,
			   DisconnectResponse_Closure closure, void *closure_data);
	void (*ping)(APIConnection_Service *service, const PingRequest *input,
		     PingResponse_Closure closure, void *closure_data);
	void (*device_info)(APIConnection_Service *service, const DeviceInfoRequest *input,
			    DeviceInfoResponse_Closure closure, void *closure_data);
	void (*list_entities)(APIConnection_Service *service, const ListEntitiesRequest *input,
			      Void_Closure closure, void *closure_data);
	void (*subscribe_states)(APIConnection_Service *service,
				 const SubscribeStatesRequest *input, Void_Closure closure,
				 void *closure_data);
	void (*subscribe_logs)(APIConnection_Service *service, const SubscribeLogsRequest *input,
			       Void_Closure closure, void *closure_data);
	void (*subscribe_homeassistant_services)(APIConnection_Service *service,
						 const SubscribeHomeassistantServicesRequest *input,
						 Void_Closure closure, void *closure_data);
	void (*subscribe_home_assistant_states)(APIConnection_Service *service,
						const SubscribeHomeAssistantStatesRequest *input,
						Void_Closure closure, void *closure_data);
	void (*get_time)(APIConnection_Service *service, const GetTimeRequest *input,
			 GetTimeResponse_Closure closure, void *closure_data);
	void (*execute_service)(APIConnection_Service *service, const ExecuteServiceRequest *input,
				Void_Closure closure, void *closure_data);
	void (*cover_command)(APIConnection_Service *service, const CoverCommandRequest *input,
			      Void_Closure closure, void *closure_data);
	void (*fan_command)(APIConnection_Service *service, const FanCommandRequest *input,
			    Void_Closure closure, void *closure_data);
	void (*light_command)(APIConnection_Service *service, const LightCommandRequest *input,
			      Void_Closure closure, void *closure_data);
	void (*switch_command)(APIConnection_Service *service, const SwitchCommandRequest *input,
			       Void_Closure closure, void *closure_data);
	void (*camera_image)(APIConnection_Service *service, const CameraImageRequest *input,
			     Void_Closure closure, void *closure_data);
	void (*climate_command)(APIConnection_Service *service, const ClimateCommandRequest *input,
				Void_Closure closure, void *closure_data);
	void (*number_command)(APIConnection_Service *service, const NumberCommandRequest *input,
			       Void_Closure closure, void *closure_data);
	void (*text_command)(APIConnection_Service *service, const TextCommandRequest *input,
			     Void_Closure closure, void *closure_data);
	void (*select_command)(APIConnection_Service *service, const SelectCommandRequest *input,
			       Void_Closure closure, void *closure_data);
	void (*button_command)(APIConnection_Service *service, const ButtonCommandRequest *input,
			       Void_Closure closure, void *closure_data);
	void (*lock_command)(APIConnection_Service *service, const LockCommandRequest *input,
			     Void_Closure closure, void *closure_data);
	void (*valve_command)(APIConnection_Service *service, const ValveCommandRequest *input,
			      Void_Closure closure, void *closure_data);
	void (*media_player_command)(APIConnection_Service *service,
				     const MediaPlayerCommandRequest *input, Void_Closure closure,
				     void *closure_data);
	void (*date_command)(APIConnection_Service *service, const DateCommandRequest *input,
			     Void_Closure closure, void *closure_data);
	void (*time_command)(APIConnection_Service *service, const TimeCommandRequest *input,
			     Void_Closure closure, void *closure_data);
	void (*datetime_command)(APIConnection_Service *service,
				 const DateTimeCommandRequest *input, Void_Closure closure,
				 void *closure_data);
	void (*update_command)(APIConnection_Service *service, const UpdateCommandRequest *input,
			       Void_Closure closure, void *closure_data);
	void (*subscribe_bluetooth_le_advertisements)(
		APIConnection_Service *service,
		const SubscribeBluetoothLEAdvertisementsRequest *input, Void_Closure closure,
		void *closure_data);
	void (*bluetooth_device_request)(APIConnection_Service *service,
					 const BluetoothDeviceRequest *input, Void_Closure closure,
					 void *closure_data);
	void (*bluetooth_gatt_get_services)(APIConnection_Service *service,
					    const BluetoothGATTGetServicesRequest *input,
					    Void_Closure closure, void *closure_data);
	void (*bluetooth_gatt_read)(APIConnection_Service *service,
				    const BluetoothGATTReadRequest *input, Void_Closure closure,
				    void *closure_data);
	void (*bluetooth_gatt_write)(APIConnection_Service *service,
				     const BluetoothGATTWriteRequest *input, Void_Closure closure,
				     void *closure_data);
	void (*bluetooth_gatt_read_descriptor)(APIConnection_Service *service,
					       const BluetoothGATTReadDescriptorRequest *input,
					       Void_Closure closure, void *closure_data);
	void (*bluetooth_gatt_write_descriptor)(APIConnection_Service *service,
						const BluetoothGATTWriteDescriptorRequest *input,
						Void_Closure closure, void *closure_data);
	void (*bluetooth_gatt_notify)(APIConnection_Service *service,
				      const BluetoothGATTNotifyRequest *input, Void_Closure closure,
				      void *closure_data);
	void (*subscribe_bluetooth_connections_free)(
		APIConnection_Service *service,
		const SubscribeBluetoothConnectionsFreeRequest *input,
		BluetoothConnectionsFreeResponse_Closure closure, void *closure_data);
	void (*unsubscribe_bluetooth_le_advertisements)(
		APIConnection_Service *service,
		const UnsubscribeBluetoothLEAdvertisementsRequest *input, Void_Closure closure,
		void *closure_data);
	void (*subscribe_voice_assistant)(APIConnection_Service *service,
					  const SubscribeVoiceAssistantRequest *input,
					  Void_Closure closure, void *closure_data);
	void (*voice_assistant_get_configuration)(
		APIConnection_Service *service, const VoiceAssistantConfigurationRequest *input,
		VoiceAssistantConfigurationResponse_Closure closure, void *closure_data);
	void (*voice_assistant_set_configuration)(APIConnection_Service *service,
						  const VoiceAssistantSetConfiguration *input,
						  Void_Closure closure, void *closure_data);
	void (*alarm_control_panel_command)(APIConnection_Service *service,
					    const AlarmControlPanelCommandRequest *input,
					    Void_Closure closure, void *closure_data);
};
typedef void (*APIConnection_ServiceDestroy)(APIConnection_Service *);
void apiconnection__init(APIConnection_Service *service, APIConnection_ServiceDestroy destroy);
#define APICONNECTION__BASE_INIT                                                                   \
	{&apiconnection__descriptor, protobuf_c_service_invoke_internal, NULL}
#define APICONNECTION__INIT(function_prefix__)                                                     \
	{APICONNECTION__BASE_INIT,                                                                 \
	 function_prefix__##hello,                                                                 \
	 function_prefix__##connect,                                                               \
	 function_prefix__##disconnect,                                                            \
	 function_prefix__##ping,                                                                  \
	 function_prefix__##device_info,                                                           \
	 function_prefix__##list_entities,                                                         \
	 function_prefix__##subscribe_states,                                                      \
	 function_prefix__##subscribe_logs,                                                        \
	 function_prefix__##subscribe_homeassistant_services,                                      \
	 function_prefix__##subscribe_home_assistant_states,                                       \
	 function_prefix__##get_time,                                                              \
	 function_prefix__##execute_service,                                                       \
	 function_prefix__##cover_command,                                                         \
	 function_prefix__##fan_command,                                                           \
	 function_prefix__##light_command,                                                         \
	 function_prefix__##switch_command,                                                        \
	 function_prefix__##camera_image,                                                          \
	 function_prefix__##climate_command,                                                       \
	 function_prefix__##number_command,                                                        \
	 function_prefix__##text_command,                                                          \
	 function_prefix__##select_command,                                                        \
	 function_prefix__##button_command,                                                        \
	 function_prefix__##lock_command,                                                          \
	 function_prefix__##valve_command,                                                         \
	 function_prefix__##media_player_command,                                                  \
	 function_prefix__##date_command,                                                          \
	 function_prefix__##time_command,                                                          \
	 function_prefix__##datetime_command,                                                      \
	 function_prefix__##update_command,                                                        \
	 function_prefix__##subscribe_bluetooth_le_advertisements,                                 \
	 function_prefix__##bluetooth_device_request,                                              \
	 function_prefix__##bluetooth_gatt_get_services,                                           \
	 function_prefix__##bluetooth_gatt_read,                                                   \
	 function_prefix__##bluetooth_gatt_write,                                                  \
	 function_prefix__##bluetooth_gatt_read_descriptor,                                        \
	 function_prefix__##bluetooth_gatt_write_descriptor,                                       \
	 function_prefix__##bluetooth_gatt_notify,                                                 \
	 function_prefix__##subscribe_bluetooth_connections_free,                                  \
	 function_prefix__##unsubscribe_bluetooth_le_advertisements,                               \
	 function_prefix__##subscribe_voice_assistant,                                             \
	 function_prefix__##voice_assistant_get_configuration,                                     \
	 function_prefix__##voice_assistant_set_configuration,                                     \
	 function_prefix__##alarm_control_panel_command}
void apiconnection__hello(ProtobufCService *service, const HelloRequest *input,
			  HelloResponse_Closure closure, void *closure_data);
void apiconnection__connect(ProtobufCService *service, const ConnectRequest *input,
			    ConnectResponse_Closure closure, void *closure_data);
void apiconnection__disconnect(ProtobufCService *service, const DisconnectRequest *input,
			       DisconnectResponse_Closure closure, void *closure_data);
void apiconnection__ping(ProtobufCService *service, const PingRequest *input,
			 PingResponse_Closure closure, void *closure_data);
void apiconnection__device_info(ProtobufCService *service, const DeviceInfoRequest *input,
				DeviceInfoResponse_Closure closure, void *closure_data);
void apiconnection__list_entities(ProtobufCService *service, const ListEntitiesRequest *input,
				  Void_Closure closure, void *closure_data);
void apiconnection__subscribe_states(ProtobufCService *service, const SubscribeStatesRequest *input,
				     Void_Closure closure, void *closure_data);
void apiconnection__subscribe_logs(ProtobufCService *service, const SubscribeLogsRequest *input,
				   Void_Closure closure, void *closure_data);
void apiconnection__subscribe_homeassistant_services(
	ProtobufCService *service, const SubscribeHomeassistantServicesRequest *input,
	Void_Closure closure, void *closure_data);
void apiconnection__subscribe_home_assistant_states(
	ProtobufCService *service, const SubscribeHomeAssistantStatesRequest *input,
	Void_Closure closure, void *closure_data);
void apiconnection__get_time(ProtobufCService *service, const GetTimeRequest *input,
			     GetTimeResponse_Closure closure, void *closure_data);
void apiconnection__execute_service(ProtobufCService *service, const ExecuteServiceRequest *input,
				    Void_Closure closure, void *closure_data);
void apiconnection__cover_command(ProtobufCService *service, const CoverCommandRequest *input,
				  Void_Closure closure, void *closure_data);
void apiconnection__fan_command(ProtobufCService *service, const FanCommandRequest *input,
				Void_Closure closure, void *closure_data);
void apiconnection__light_command(ProtobufCService *service, const LightCommandRequest *input,
				  Void_Closure closure, void *closure_data);
void apiconnection__switch_command(ProtobufCService *service, const SwitchCommandRequest *input,
				   Void_Closure closure, void *closure_data);
void apiconnection__camera_image(ProtobufCService *service, const CameraImageRequest *input,
				 Void_Closure closure, void *closure_data);
void apiconnection__climate_command(ProtobufCService *service, const ClimateCommandRequest *input,
				    Void_Closure closure, void *closure_data);
void apiconnection__number_command(ProtobufCService *service, const NumberCommandRequest *input,
				   Void_Closure closure, void *closure_data);
void apiconnection__text_command(ProtobufCService *service, const TextCommandRequest *input,
				 Void_Closure closure, void *closure_data);
void apiconnection__select_command(ProtobufCService *service, const SelectCommandRequest *input,
				   Void_Closure closure, void *closure_data);
void apiconnection__button_command(ProtobufCService *service, const ButtonCommandRequest *input,
				   Void_Closure closure, void *closure_data);
void apiconnection__lock_command(ProtobufCService *service, const LockCommandRequest *input,
				 Void_Closure closure, void *closure_data);
void apiconnection__valve_command(ProtobufCService *service, const ValveCommandRequest *input,
				  Void_Closure closure, void *closure_data);
void apiconnection__media_player_command(ProtobufCService *service,
					 const MediaPlayerCommandRequest *input,
					 Void_Closure closure, void *closure_data);
void apiconnection__date_command(ProtobufCService *service, const DateCommandRequest *input,
				 Void_Closure closure, void *closure_data);
void apiconnection__time_command(ProtobufCService *service, const TimeCommandRequest *input,
				 Void_Closure closure, void *closure_data);
void apiconnection__datetime_command(ProtobufCService *service, const DateTimeCommandRequest *input,
				     Void_Closure closure, void *closure_data);
void apiconnection__update_command(ProtobufCService *service, const UpdateCommandRequest *input,
				   Void_Closure closure, void *closure_data);
void apiconnection__subscribe_bluetooth_le_advertisements(
	ProtobufCService *service, const SubscribeBluetoothLEAdvertisementsRequest *input,
	Void_Closure closure, void *closure_data);
void apiconnection__bluetooth_device_request(ProtobufCService *service,
					     const BluetoothDeviceRequest *input,
					     Void_Closure closure, void *closure_data);
void apiconnection__bluetooth_gatt_get_services(ProtobufCService *service,
						const BluetoothGATTGetServicesRequest *input,
						Void_Closure closure, void *closure_data);
void apiconnection__bluetooth_gatt_read(ProtobufCService *service,
					const BluetoothGATTReadRequest *input, Void_Closure closure,
					void *closure_data);
void apiconnection__bluetooth_gatt_write(ProtobufCService *service,
					 const BluetoothGATTWriteRequest *input,
					 Void_Closure closure, void *closure_data);
void apiconnection__bluetooth_gatt_read_descriptor(ProtobufCService *service,
						   const BluetoothGATTReadDescriptorRequest *input,
						   Void_Closure closure, void *closure_data);
void apiconnection__bluetooth_gatt_write_descriptor(
	ProtobufCService *service, const BluetoothGATTWriteDescriptorRequest *input,
	Void_Closure closure, void *closure_data);
void apiconnection__bluetooth_gatt_notify(ProtobufCService *service,
					  const BluetoothGATTNotifyRequest *input,
					  Void_Closure closure, void *closure_data);
void apiconnection__subscribe_bluetooth_connections_free(
	ProtobufCService *service, const SubscribeBluetoothConnectionsFreeRequest *input,
	BluetoothConnectionsFreeResponse_Closure closure, void *closure_data);
void apiconnection__unsubscribe_bluetooth_le_advertisements(
	ProtobufCService *service, const UnsubscribeBluetoothLEAdvertisementsRequest *input,
	Void_Closure closure, void *closure_data);
void apiconnection__subscribe_voice_assistant(ProtobufCService *service,
					      const SubscribeVoiceAssistantRequest *input,
					      Void_Closure closure, void *closure_data);
void apiconnection__voice_assistant_get_configuration(
	ProtobufCService *service, const VoiceAssistantConfigurationRequest *input,
	VoiceAssistantConfigurationResponse_Closure closure, void *closure_data);
void apiconnection__voice_assistant_set_configuration(ProtobufCService *service,
						      const VoiceAssistantSetConfiguration *input,
						      Void_Closure closure, void *closure_data);
void apiconnection__alarm_control_panel_command(ProtobufCService *service,
						const AlarmControlPanelCommandRequest *input,
						Void_Closure closure, void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor entity_category__descriptor;
extern const ProtobufCEnumDescriptor legacy_cover_state__descriptor;
extern const ProtobufCEnumDescriptor cover_operation__descriptor;
extern const ProtobufCEnumDescriptor legacy_cover_command__descriptor;
extern const ProtobufCEnumDescriptor fan_speed__descriptor;
extern const ProtobufCEnumDescriptor fan_direction__descriptor;
extern const ProtobufCEnumDescriptor color_mode__descriptor;
extern const ProtobufCEnumDescriptor sensor_state_class__descriptor;
extern const ProtobufCEnumDescriptor sensor_last_reset_type__descriptor;
extern const ProtobufCEnumDescriptor log_level__descriptor;
extern const ProtobufCEnumDescriptor service_arg_type__descriptor;
extern const ProtobufCEnumDescriptor climate_mode__descriptor;
extern const ProtobufCEnumDescriptor climate_fan_mode__descriptor;
extern const ProtobufCEnumDescriptor climate_swing_mode__descriptor;
extern const ProtobufCEnumDescriptor climate_action__descriptor;
extern const ProtobufCEnumDescriptor climate_preset__descriptor;
extern const ProtobufCEnumDescriptor number_mode__descriptor;
extern const ProtobufCEnumDescriptor lock_state__descriptor;
extern const ProtobufCEnumDescriptor lock_command__descriptor;
extern const ProtobufCEnumDescriptor media_player_state__descriptor;
extern const ProtobufCEnumDescriptor media_player_command__descriptor;
extern const ProtobufCEnumDescriptor media_player_format_purpose__descriptor;
extern const ProtobufCEnumDescriptor bluetooth_device_request_type__descriptor;
extern const ProtobufCEnumDescriptor voice_assistant_subscribe_flag__descriptor;
extern const ProtobufCEnumDescriptor voice_assistant_request_flag__descriptor;
extern const ProtobufCEnumDescriptor voice_assistant_event__descriptor;
extern const ProtobufCEnumDescriptor voice_assistant_timer_event__descriptor;
extern const ProtobufCEnumDescriptor alarm_control_panel_state__descriptor;
extern const ProtobufCEnumDescriptor alarm_control_panel_state_command__descriptor;
extern const ProtobufCEnumDescriptor text_mode__descriptor;
extern const ProtobufCEnumDescriptor valve_operation__descriptor;
extern const ProtobufCEnumDescriptor update_command__descriptor;
extern const ProtobufCMessageDescriptor hello_request__descriptor;
extern const ProtobufCMessageDescriptor hello_response__descriptor;
extern const ProtobufCMessageDescriptor connect_request__descriptor;
extern const ProtobufCMessageDescriptor connect_response__descriptor;
extern const ProtobufCMessageDescriptor disconnect_request__descriptor;
extern const ProtobufCMessageDescriptor disconnect_response__descriptor;
extern const ProtobufCMessageDescriptor ping_request__descriptor;
extern const ProtobufCMessageDescriptor ping_response__descriptor;
extern const ProtobufCMessageDescriptor device_info_request__descriptor;
extern const ProtobufCMessageDescriptor device_info_response__descriptor;
extern const ProtobufCMessageDescriptor list_entities_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_done_response__descriptor;
extern const ProtobufCMessageDescriptor subscribe_states_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_binary_sensor_response__descriptor;
extern const ProtobufCMessageDescriptor binary_sensor_state_response__descriptor;
extern const ProtobufCMessageDescriptor list_entities_cover_response__descriptor;
extern const ProtobufCMessageDescriptor cover_state_response__descriptor;
extern const ProtobufCMessageDescriptor cover_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_fan_response__descriptor;
extern const ProtobufCMessageDescriptor fan_state_response__descriptor;
extern const ProtobufCMessageDescriptor fan_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_light_response__descriptor;
extern const ProtobufCMessageDescriptor light_state_response__descriptor;
extern const ProtobufCMessageDescriptor light_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_sensor_response__descriptor;
extern const ProtobufCMessageDescriptor sensor_state_response__descriptor;
extern const ProtobufCMessageDescriptor list_entities_switch_response__descriptor;
extern const ProtobufCMessageDescriptor switch_state_response__descriptor;
extern const ProtobufCMessageDescriptor switch_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_text_sensor_response__descriptor;
extern const ProtobufCMessageDescriptor text_sensor_state_response__descriptor;
extern const ProtobufCMessageDescriptor subscribe_logs_request__descriptor;
extern const ProtobufCMessageDescriptor subscribe_logs_response__descriptor;
extern const ProtobufCMessageDescriptor subscribe_homeassistant_services_request__descriptor;
extern const ProtobufCMessageDescriptor homeassistant_service_map__descriptor;
extern const ProtobufCMessageDescriptor homeassistant_service_response__descriptor;
extern const ProtobufCMessageDescriptor subscribe_home_assistant_states_request__descriptor;
extern const ProtobufCMessageDescriptor subscribe_home_assistant_state_response__descriptor;
extern const ProtobufCMessageDescriptor home_assistant_state_response__descriptor;
extern const ProtobufCMessageDescriptor get_time_request__descriptor;
extern const ProtobufCMessageDescriptor get_time_response__descriptor;
extern const ProtobufCMessageDescriptor list_entities_services_argument__descriptor;
extern const ProtobufCMessageDescriptor list_entities_services_response__descriptor;
extern const ProtobufCMessageDescriptor execute_service_argument__descriptor;
extern const ProtobufCMessageDescriptor execute_service_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_camera_response__descriptor;
extern const ProtobufCMessageDescriptor camera_image_response__descriptor;
extern const ProtobufCMessageDescriptor camera_image_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_climate_response__descriptor;
extern const ProtobufCMessageDescriptor climate_state_response__descriptor;
extern const ProtobufCMessageDescriptor climate_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_number_response__descriptor;
extern const ProtobufCMessageDescriptor number_state_response__descriptor;
extern const ProtobufCMessageDescriptor number_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_select_response__descriptor;
extern const ProtobufCMessageDescriptor select_state_response__descriptor;
extern const ProtobufCMessageDescriptor select_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_lock_response__descriptor;
extern const ProtobufCMessageDescriptor lock_state_response__descriptor;
extern const ProtobufCMessageDescriptor lock_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_button_response__descriptor;
extern const ProtobufCMessageDescriptor button_command_request__descriptor;
extern const ProtobufCMessageDescriptor media_player_supported_format__descriptor;
extern const ProtobufCMessageDescriptor list_entities_media_player_response__descriptor;
extern const ProtobufCMessageDescriptor media_player_state_response__descriptor;
extern const ProtobufCMessageDescriptor media_player_command_request__descriptor;
extern const ProtobufCMessageDescriptor subscribe_bluetooth_leadvertisements_request__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_service_data__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_leadvertisement_response__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_leraw_advertisement__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_leraw_advertisements_response__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_device_request__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_device_connection_response__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattget_services_request__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattdescriptor__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattcharacteristic__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattservice__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattget_services_response__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattget_services_done_response__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattread_request__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattread_response__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattwrite_request__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattread_descriptor_request__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattwrite_descriptor_request__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattnotify_request__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattnotify_data_response__descriptor;
extern const ProtobufCMessageDescriptor subscribe_bluetooth_connections_free_request__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_connections_free_response__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gatterror_response__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattwrite_response__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_gattnotify_response__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_device_pairing_response__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_device_unpairing_response__descriptor;
extern const ProtobufCMessageDescriptor unsubscribe_bluetooth_leadvertisements_request__descriptor;
extern const ProtobufCMessageDescriptor bluetooth_device_clear_cache_response__descriptor;
extern const ProtobufCMessageDescriptor subscribe_voice_assistant_request__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_audio_settings__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_request__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_response__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_event_data__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_event_response__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_audio__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_timer_event_response__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_announce_request__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_announce_finished__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_wake_word__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_configuration_request__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_configuration_response__descriptor;
extern const ProtobufCMessageDescriptor voice_assistant_set_configuration__descriptor;
extern const ProtobufCMessageDescriptor list_entities_alarm_control_panel_response__descriptor;
extern const ProtobufCMessageDescriptor alarm_control_panel_state_response__descriptor;
extern const ProtobufCMessageDescriptor alarm_control_panel_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_text_response__descriptor;
extern const ProtobufCMessageDescriptor text_state_response__descriptor;
extern const ProtobufCMessageDescriptor text_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_date_response__descriptor;
extern const ProtobufCMessageDescriptor date_state_response__descriptor;
extern const ProtobufCMessageDescriptor date_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_time_response__descriptor;
extern const ProtobufCMessageDescriptor time_state_response__descriptor;
extern const ProtobufCMessageDescriptor time_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_event_response__descriptor;
extern const ProtobufCMessageDescriptor event_response__descriptor;
extern const ProtobufCMessageDescriptor list_entities_valve_response__descriptor;
extern const ProtobufCMessageDescriptor valve_state_response__descriptor;
extern const ProtobufCMessageDescriptor valve_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_date_time_response__descriptor;
extern const ProtobufCMessageDescriptor date_time_state_response__descriptor;
extern const ProtobufCMessageDescriptor date_time_command_request__descriptor;
extern const ProtobufCMessageDescriptor list_entities_update_response__descriptor;
extern const ProtobufCMessageDescriptor update_state_response__descriptor;
extern const ProtobufCMessageDescriptor update_command_request__descriptor;
extern const ProtobufCServiceDescriptor apiconnection__descriptor;

PROTOBUF_C__END_DECLS

#endif /* PROTOBUF_C_api_2eproto__INCLUDED */
